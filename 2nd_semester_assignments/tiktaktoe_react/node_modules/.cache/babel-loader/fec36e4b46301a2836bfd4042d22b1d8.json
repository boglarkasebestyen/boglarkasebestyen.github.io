{"ast":null,"code":"var _jsxFileName = \"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/week16/Tic-Tac-Toe Exercise With React_starter/tiktaktoe_react/src/Board9.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n/* \n\nhttps://student.emeritus.org/courses/2405/pages/video-16-12-3-47-usestate-delay?module_item_id=784810\nVideo 16-12 (3:47): UseState Delay\n\n\nThis is a wtf video, read my notes at setColor(getRandomColor()) below\n\nIn this video, Dr. Williams will introduce you to a bug in the current program. \nHe identifies a delay in updating the color when triggering useState and will show you how to fix it.\n*/\nimport React, { useState, useEffect } from \"react\"; //new web component for the squares\n//child component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Square = ({\n  id,\n  player\n}) => {\n  _s();\n\n  const [color, setColor] = useState('green'); //color palette\n\n  const palet = ['red', 'blue', 'green'];\n\n  const getRandomColor = () => palet[Math.floor(Math.random() * 3)];\n  /*\n  - we change the state of each square now, and we want to track if they're being re-rendered (is React re-rendering)?\n  - we can figure that out with useEffect()\n  */\n\n\n  useEffect(() => {\n    console.log(`useEffect rendering square ${id}`); //will tell us which square is being re-rendered\n    //when useEffect() is returning, we can pass it a function which will be called when it's unmounting the component\n\n    return () => console.log(`useEffect unmounting square ${id}`); //I think this was the console.log I couldn't implement before :/\n  }); //--> every time we change the state, it's unmounting and then re-rendering\n  //--> it's still a forced (by us, on purpose) unmounting/mounting causing React to re-render\n  //making each of the blue squares a button\n\n  return (\n    /*#__PURE__*/\n    //changing the color of Square on the click\n    _jsxDEV(\"button\", {\n      onClick: e => {\n        //now that we track state, we can write:\n        setColor(getRandomColor());\n        e.target.style.background = color;\n        /*\n        \n        if we'd do this: e.target.style.background = getRandomColor(), there wouldn't be any change,\n        we'd make the change directly to the DOM and React wouldn't re-render\n        */\n        //------------------------------------------------------\n\n        /* Ok, in this video we suddenly have:\n         <button onClick={(e) => {\n            let col = getRandomColor();\n            setColor(col);\n            e.target.style.background = color; (will be corrected to \"col\")\n          video: there's a bug here (when it equals to color): there's a delay when we fire setColor and when the color gets updated;\n        it's an asynchronous setColor\n         -> the code in the previous code wasn't like this, wtf?\n        -> isn this equal to what it was said before that's incorrect?\n         new code block:\n         let col = getRandomColor();\n        setColor(col);\n        e.target.style.background = col;\n         isn't this equal to:\n         setColor(getRandomColor()); \n        e.target.style.background = getRandomColor();\n         ???\n         we said that:\n         if we'd do this: e.target.style.background = getRandomColor(), there wouldn't be any change,\n        we'd make the change directly to the DOM and React wouldn't re-render\n          I'm gonna ask\n        I'll rewrite it with the professor's code, ffs\n        */\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: player\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  );\n}; //parent component\n\n\n_s(Square, \"80vditnqNVBktR4/bd0/2SmjiNI=\");\n\n_c = Square;\n\nconst Board9 = () => {\n  _s2();\n\n  //new prop: player\n  const [player, setPlayer] = useState(1); //initialize player to 1\n\n  console.log('Board (re-)rendering'); //simulating the mount/unmount hook, I guess?\n\n  const [mounted, setMounted] = useState(true); //this random nr will cause the re-render because the state has changed\n\n  const [random, setRandom] = useState(0);\n  let status = `Player ${player}`; //part of mount\n  //1st click: unmounts, click again: mounts\n\n  const toggle = () => setMounted(!mounted);\n\n  const reRender = () => setRandom(Math.random()); //a function that creates the squares; square \"factory\"\n\n\n  function renderSquare(i) {\n    //*without the index argument, it doesn't work\n    return /*#__PURE__*/_jsxDEV(Square, {\n      id: i,\n      player: player\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 16\n    }, this); //**this index. we also added a new property: player\n    //getting the value of **the index that's passed in as an argument for the function\n    //id={i} is a property for Square\n    //but how do we pick this up in the Square component itself? : with props!\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: [mounted && renderSquare(0), mounted && renderSquare(1), mounted && renderSquare(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"info\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggle,\n        children: \"Show / hide row\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: reRender,\n        children: \"Re-render\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(Board9, \"XTHw31bddNSGdHeXoyabihZUfxw=\");\n\n_c2 = Board9;\nexport default Board9;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board9\");","map":{"version":3,"sources":["/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/week16/Tic-Tac-Toe Exercise With React_starter/tiktaktoe_react/src/Board9.js"],"names":["React","useState","useEffect","Square","id","player","color","setColor","palet","getRandomColor","Math","floor","random","console","log","e","target","style","background","Board9","setPlayer","mounted","setMounted","setRandom","status","toggle","reRender","renderSquare","i"],"mappings":"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","sourcesContent":["/* \n\nhttps://student.emeritus.org/courses/2405/pages/video-16-12-3-47-usestate-delay?module_item_id=784810\nVideo 16-12 (3:47): UseState Delay\n\n\nThis is a wtf video, read my notes at setColor(getRandomColor()) below\n\nIn this video, Dr. Williams will introduce you to a bug in the current program. \nHe identifies a delay in updating the color when triggering useState and will show you how to fix it.\n*/\n\nimport React, {useState, useEffect} from \"react\";\n\n//new web component for the squares\n//child component\nconst Square = ({id, player}) => { \n    const [color, setColor] = useState('green');\n\n    //color palette\n    const palet = ['red', 'blue', 'green'];\n\n    const getRandomColor = () => palet[Math.floor(Math.random() * 3)]; \n\n    /*\n    - we change the state of each square now, and we want to track if they're being re-rendered (is React re-rendering)?\n    - we can figure that out with useEffect()\n    */\n\n    useEffect(() => {\n        console.log(`useEffect rendering square ${id}`); //will tell us which square is being re-rendered\n        //when useEffect() is returning, we can pass it a function which will be called when it's unmounting the component\n        return () => console.log(`useEffect unmounting square ${id}`) //I think this was the console.log I couldn't implement before :/\n    })\n\n    //--> every time we change the state, it's unmounting and then re-rendering\n    //--> it's still a forced (by us, on purpose) unmounting/mounting causing React to re-render\n\n\n    //making each of the blue squares a button\n    return (\n        //changing the color of Square on the click\n        <button onClick={(e) => {\n            //now that we track state, we can write:\n            setColor(getRandomColor()); \n            e.target.style.background = color;\n\n            /*\n            \n            if we'd do this: e.target.style.background = getRandomColor(), there wouldn't be any change,\n            we'd make the change directly to the DOM and React wouldn't re-render\n            */\n\n            //------------------------------------------------------\n\n            /* Ok, in this video we suddenly have:\n\n            <button onClick={(e) => {\n                let col = getRandomColor();\n                setColor(col);\n                e.target.style.background = color; (will be corrected to \"col\")\n\n\n            video: there's a bug here (when it equals to color): there's a delay when we fire setColor and when the color gets updated;\n            it's an asynchronous setColor\n\n            -> the code in the previous code wasn't like this, wtf?\n            -> isn this equal to what it was said before that's incorrect?\n\n            new code block:\n\n            let col = getRandomColor();\n            setColor(col);\n            e.target.style.background = col;\n\n            isn't this equal to:\n\n            setColor(getRandomColor()); \n            e.target.style.background = getRandomColor();\n\n            ???\n\n            we said that:\n\n            if we'd do this: e.target.style.background = getRandomColor(), there wouldn't be any change,\n            we'd make the change directly to the DOM and React wouldn't re-render\n\n\n            I'm gonna ask\n            I'll rewrite it with the professor's code, ffs\n            */\n        }}>\n    \n            <h1>{player}</h1>\n\n            {/* ok, so I did this, but it's stoooooppid. it just shows that I fuckin' CLICKED ON IT, not a render, smh */}\n            {/* {console.log(`Render ${id}`)} */}\n        </button>\n    )\n}\n\n\n//parent component\nconst Board9 = () => {\n    //new prop: player\n    const [player, setPlayer] = useState(1); //initialize player to 1\n    console.log('Board (re-)rendering');\n\n    //simulating the mount/unmount hook, I guess?\n    const [mounted, setMounted] = useState(true);\n\n    //this random nr will cause the re-render because the state has changed\n    const [random, setRandom] = useState(0);\n\n    let status = `Player ${player}`;\n\n    //part of mount\n    //1st click: unmounts, click again: mounts\n    const toggle = () => setMounted(!mounted);\n    const reRender = () => setRandom(Math.random());\n    \n\n    //a function that creates the squares; square \"factory\"\n    function renderSquare(i) { //*without the index argument, it doesn't work\n        return <Square id={i} player={player}></Square>; //**this index. we also added a new property: player\n        //getting the value of **the index that's passed in as an argument for the function\n        //id={i} is a property for Square\n        //but how do we pick this up in the Square component itself? : with props!\n    }\n    return (\n        <div\n        className=\"game-board\">\n            {/* creating a grid row in which we'll put the blue squares */}\n            <div className=\"grid-row\">\n            {/* *the numbers (arguments) can be the ids of the squares */}\n            {/* we will need to be able to flip these on and off, stop the rendering, so let's simulate a component unmount hook*/}\n            {/* if it's mounted, renderSquare will be called */}\n                {mounted && renderSquare(0)}\n                {mounted && renderSquare(1)}\n                {mounted && renderSquare(2)}\n            </div>\n        <div id=\"info\">\n            <button onClick={toggle}>Show / hide row</button>\n            {/* forcing a re-render, both parent (board) and child (squares) */}\n            <button onClick={reRender}>Re-render</button>\n            <h1>{status}</h1>\n        </div>\n        </div>\n    );\n};\n\nexport default Board9;\n"]},"metadata":{},"sourceType":"module"}