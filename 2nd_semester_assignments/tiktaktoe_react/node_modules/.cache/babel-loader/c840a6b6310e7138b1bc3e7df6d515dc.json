{"ast":null,"code":"var _jsxFileName = \"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/week15/Working With Simple Components_starter/ATM_Exercise/atm_example_react/src/Account.js\",\n    _s = $RefreshSig$();\n\n/* ez a lecke: Video 15.4, 15.5\r\n\r\n- az előzőbe videóba is volt szó state-ről, de ebbe a leckébe az első videóban teljesen ki lett hagyva\r\nés megint kezdtük a HTML-es verzióval\r\n- az előző state-es példába csak egy alert írta ki a totalt amúgy\r\n*/\nimport React from \"react\"; // const ATMDeposit = ({onChange}) => {\n//   return (\n//     <label className=\"label huge\">\n//       Deposit:\n//       <input type=\"number\" onChange={onChange}></input>\n//       {/* no idea what {onChange} is */}\n//       <input type=\"submit\" value=\"submit\"></input>  \n//     </label>\n//   );\n// };\n// this will simulate the bank\n// keeps track of the total amount of money\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Account = () => {\n  _s();\n\n  let transactionState = 0; //how much money we're trying to withdraw or deposit\n\n  const [totalState, setTotalState] = React.useState(0);\n  let status = `Account Balance $ ${totalState}`;\n  console.log(\"account rendered\");\n\n  const handleChange = event => {\n    console.log(`handleChange ${event.target.value}`);\n    transactionState = Number(event.target.value);\n  }; //needs to get the event...in the video, it didn't and it still worked, wtf\n\n\n  const handleSubmit = event => {\n    setTotalState(totalState + transactionState); // --> setting the state causes a re-render of the component, don't forget!\n\n    event.preventDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"total\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      onChange: handleChange,\n      children: \"Deposit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Account, \"ZI+vmKsnEJiKK8JUENzG6kq2OKc=\");\n\n_c = Account;\nexport default Account;\n\nvar _c;\n\n$RefreshReg$(_c, \"Account\");","map":{"version":3,"sources":["/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/week15/Working With Simple Components_starter/ATM_Exercise/atm_example_react/src/Account.js"],"names":["React","Account","transactionState","totalState","setTotalState","useState","status","console","log","handleChange","event","target","value","Number","handleSubmit","preventDefault"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;AACA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,MAAIC,gBAAgB,GAAG,CAAvB,CADoB,CACM;;AAC1B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,KAAK,CAACK,QAAN,CAAe,CAAf,CAApC;AACA,MAAIC,MAAM,GAAI,qBAAoBH,UAAW,EAA7C;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;;AAEA,QAAMC,YAAY,GAAGC,KAAK,IAAI;AAC5BH,IAAAA,OAAO,CAACC,GAAR,CAAa,gBAAeE,KAAK,CAACC,MAAN,CAAaC,KAAM,EAA/C;AACAV,IAAAA,gBAAgB,GAAGW,MAAM,CAACH,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAzB;AACD,GAHD,CANoB,CAWpB;;;AACA,QAAME,YAAY,GAAGJ,KAAK,IAAI;AAC5BN,IAAAA,aAAa,CAACD,UAAU,GAAGD,gBAAd,CAAb,CAD4B,CAE5B;;AACAQ,IAAAA,KAAK,CAACK,cAAN;AACD,GAJD;;AAKA,sBACE;AAAM,IAAA,QAAQ,EAAED,YAAhB;AAAA,4BACE;AAAI,MAAA,EAAE,EAAC,OAAP;AAAA,gBAAgBR;AAAhB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAI,MAAA,QAAQ,EAAEG,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAvBD;;GAAMR,O;;KAAAA,O;AAyBN,eAAeA,OAAf","sourcesContent":["/* ez a lecke: Video 15.4, 15.5\r\n\r\n- az előzőbe videóba is volt szó state-ről, de ebbe a leckébe az első videóban teljesen ki lett hagyva\r\nés megint kezdtük a HTML-es verzióval\r\n- az előző state-es példába csak egy alert írta ki a totalt amúgy\r\n*/\r\n\r\nimport React from \"react\";\r\n\r\n// const ATMDeposit = ({onChange}) => {\r\n//   return (\r\n//     <label className=\"label huge\">\r\n//       Deposit:\r\n//       <input type=\"number\" onChange={onChange}></input>\r\n//       {/* no idea what {onChange} is */}\r\n//       <input type=\"submit\" value=\"submit\"></input>  \r\n//     </label>\r\n//   );\r\n// };\r\n\r\n// this will simulate the bank\r\n// keeps track of the total amount of money\r\nconst Account = () => {\r\n  let transactionState = 0; //how much money we're trying to withdraw or deposit\r\n  const [totalState, setTotalState] = React.useState(0);\r\n  let status = `Account Balance $ ${totalState}`;\r\n  console.log(\"account rendered\");\r\n\r\n  const handleChange = event => {\r\n    console.log(`handleChange ${event.target.value}`);\r\n    transactionState = Number(event.target.value); \r\n  };\r\n\r\n  //needs to get the event...in the video, it didn't and it still worked, wtf\r\n  const handleSubmit = event => {\r\n    setTotalState(totalState + transactionState); \r\n    // --> setting the state causes a re-render of the component, don't forget!\r\n    event.preventDefault();\r\n  };\r\n  return(\r\n    <form onSubmit={handleSubmit}>\r\n      <h2 id=\"total\">{status}</h2>\r\n      <h3 onChange={handleChange}>Deposit</h3>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Account;\r\n"]},"metadata":{},"sourceType":"module"}