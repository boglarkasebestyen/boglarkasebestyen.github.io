{"ast":null,"code":"var _jsxFileName = \"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/week16/Tic-Tac-Toe Exercise With React_starter/tiktaktoe_react/src/Board3.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\"; //new web component for the squares\n//child component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Square = ({\n  id,\n  player\n}) => {\n  //picking up the properties. passing it in from the parent via the properties into the child\n  //color palette\n  const palet = ['red', 'blue', 'green'];\n  /*let's have a function that gives us a random color\n  const getRandomColor = () => {\n      return palet[Math.floor(Math.random(palet) * 3)]; //to get a nr between 0 and 3\n  }\n   my version, BAD, doesn't work. Math.random() DOES NOT get parameters\n      const getRandomColor = () => {\n      let color = Math.floor(Math.random(palet) * 3)\n      return color; \n  }\n  -----\n  above, (not mine) correct version same as:\n  */\n\n  const getRandomColor = () => palet[Math.floor(Math.random() * 3)]; //to get a nr between 0 and 3\n\n  /* side note...\n   Random Method:\n   The JavaScript Math.random() method is an excellent built-in method for producing random numbers. \n  When Math.random() is executed, \n  \n                          !!!\n  ** it returns a random number that can be anywhere between 0 and 1 **\n  ** the 0 is included and 1 is excluded **\n                          !!!\n   Generating a random floating point number between 0 and 1\n  The Math.random() method will return a floating point (decimal) number greater than or equal to 0 and less than (but never equal to) 1. In other words 0 <= x < 1. For example:\n   console.log(Math.random());\n  // 0.7069207248635578\n   console.log(Math.random());\n  // 0.765046694794209\n   console.log(Math.random());\n  // 0.14069121642698246\n   (Of course, the numbers returned will be different every time. This will be assumed for all following examples - different results will happen on each pass.)\n   To get a random number between a larger range multiply the result of Math.random() by a number.\n   */\n  //making each of the blue squares a button\n\n\n  return (\n    /*#__PURE__*/\n    //changing the color of Square on the click\n    _jsxDEV(\"button\", {\n      onClick: e => {\n        e.target.style.background = getRandomColor();\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)\n  ); //the ids appear on the button\n}; //same thing as writing:\n// const Square = (props) => {\n//     return <button>{props.id}</button>\n// }\n//parent component\n\n\n_c = Square;\n\nconst Board = () => {\n  _s();\n\n  const [player, setPlayer] = React.useState(1); //initialize player to 1\n\n  let status = `Player ${player}`; //a function that creates the squares; square \"factory\"\n\n  function renderSquare(i) {\n    //*without the index argument, it doesn't work\n    return /*#__PURE__*/_jsxDEV(Square, {\n      id: i\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 16\n    }, this); //**this index\n    //getting the value of **the index that's passed in as an argument for the function\n    //id={i} is a property for Square\n    //but how do we pick this up in the Square component itself? : with props!\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: [renderSquare(0), renderSquare(1), renderSquare(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"info\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"H3eg3BtQXHeaCkXL1Eian/wKskM=\");\n\n_c2 = Board;\nexport default Board;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");","map":{"version":3,"sources":["/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/week16/Tic-Tac-Toe Exercise With React_starter/tiktaktoe_react/src/Board3.js"],"names":["React","Square","id","player","palet","getRandomColor","Math","floor","random","e","target","style","background","Board","setPlayer","useState","status","renderSquare","i"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;;;;AACA,MAAMC,MAAM,GAAG,CAAC;AAACC,EAAAA,EAAD;AAAKC,EAAAA;AAAL,CAAD,KAAkB;AAAE;AAC/B;AACA,QAAMC,KAAK,GAAG,CAAC,KAAD,EAAQ,MAAR,EAAgB,OAAhB,CAAd;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAII,QAAMC,cAAc,GAAG,MAAMD,KAAK,CAACE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAD,CAAlC,CAnB6B,CAmBsC;;AACnE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWI;;;AACA;AAAA;AACI;AACA;AAAQ,MAAA,OAAO,EAAGC,CAAD,IAAO;AACpBA,QAAAA,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeC,UAAf,GAA4BP,cAAc,EAA1C;AACH,OAFD;AAAA,6BAGI;AAAA,kBAAKH;AAAL;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA;AAFJ,IAnD6B,CA2D7B;AACH,CA5DD,C,CA8DA;AAEA;AACA;AACA;AAEA;;;KApEMD,M;;AAqEN,MAAMY,KAAK,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACV,MAAD,EAASW,SAAT,IAAsBd,KAAK,CAACe,QAAN,CAAe,CAAf,CAA5B,CADgB,CAC+B;;AAC/C,MAAIC,MAAM,GAAI,UAASb,MAAO,EAA9B,CAFgB,CAIhB;;AACA,WAASc,YAAT,CAAsBC,CAAtB,EAAyB;AAAE;AACvB,wBAAO,QAAC,MAAD;AAAQ,MAAA,EAAE,EAAEA;AAAZ;AAAA;AAAA;AAAA;AAAA,YAAP,CADqB,CACY;AACjC;AACA;AACA;AACH;;AAED,sBACI;AACA,IAAA,SAAS,EAAC,YADV;AAAA,4BAGI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,iBAEKD,YAAY,CAAC,CAAD,CAFjB,EAGKA,YAAY,CAAC,CAAD,CAHjB,EAIKA,YAAY,CAAC,CAAD,CAJjB;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAUA;AAAK,MAAA,EAAE,EAAC,MAAR;AAAA,6BACI;AAAA,kBAAKD;AAAL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAVA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CA5BD;;GAAMH,K;;MAAAA,K;AA8BN,eAAeA,KAAf","sourcesContent":["import React from \"react\";\n\n//new web component for the squares\n//child component\nconst Square = ({id, player}) => { //picking up the properties. passing it in from the parent via the properties into the child\n    //color palette\n    const palet = ['red', 'blue', 'green'];\n\n    /*let's have a function that gives us a random color\n    const getRandomColor = () => {\n        return palet[Math.floor(Math.random(palet) * 3)]; //to get a nr between 0 and 3\n    }\n\n    my version, BAD, doesn't work. Math.random() DOES NOT get parameters\n\n       const getRandomColor = () => {\n        let color = Math.floor(Math.random(palet) * 3)\n        return color; \n    }\n    -----\n    above, (not mine) correct version same as:\n    */\n\n    const getRandomColor = () => palet[Math.floor(Math.random() * 3)]; //to get a nr between 0 and 3\n    /* side note...\n\n    Random Method:\n\n    The JavaScript Math.random() method is an excellent built-in method for producing random numbers. \n    When Math.random() is executed, \n    \n                            !!!\n    ** it returns a random number that can be anywhere between 0 and 1 **\n    ** the 0 is included and 1 is excluded **\n                            !!!\n\n    Generating a random floating point number between 0 and 1\n    The Math.random() method will return a floating point (decimal) number greater than or equal to 0 and less than (but never equal to) 1. In other words 0 <= x < 1. For example:\n\n    console.log(Math.random());\n    // 0.7069207248635578\n\n    console.log(Math.random());\n    // 0.765046694794209\n\n    console.log(Math.random());\n    // 0.14069121642698246\n\n    (Of course, the numbers returned will be different every time. This will be assumed for all following examples - different results will happen on each pass.)\n\n    To get a random number between a larger range multiply the result of Math.random() by a number.\n\n    */\n\n    //making each of the blue squares a button\n    return (\n        //changing the color of Square on the click\n        <button onClick={(e) => {\n            e.target.style.background = getRandomColor();\n        }}>\n            <h1>{id}</h1>\n        </button>\n    )\n    //the ids appear on the button\n}\n\n//same thing as writing:\n\n// const Square = (props) => {\n//     return <button>{props.id}</button>\n// }\n\n//parent component\nconst Board = () => {\n    const [player, setPlayer] = React.useState(1); //initialize player to 1\n    let status = `Player ${player}`;\n\n    //a function that creates the squares; square \"factory\"\n    function renderSquare(i) { //*without the index argument, it doesn't work\n        return <Square id={i}></Square>; //**this index\n        //getting the value of **the index that's passed in as an argument for the function\n        //id={i} is a property for Square\n        //but how do we pick this up in the Square component itself? : with props!\n    }\n    \n    return (\n        <div\n        className=\"game-board\">\n            {/* creating a grid row in which we'll put the blue squares */}\n            <div className=\"grid-row\">\n            {/* *the numbers (arguments) can be the ids of the squares */}\n                {renderSquare(0)} \n                {renderSquare(1)} \n                {renderSquare(2)} \n\n            </div>\n        <div id=\"info\">\n            <h1>{status}</h1>\n        </div>\n        </div>\n    );\n};\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}