{"ast":null,"code":"var _jsxFileName = \"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/to_github_backup/boglarkasebestyen.github.io/2nd_semester_assignments/tiktaktoe_react/src/Board.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport checkWinner from \"./checkWinner\"; //new web component for the squares\n//child component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Square = ({\n  id,\n  player,\n  newState\n}) => {\n  _s();\n\n  const [color, setColor] = useState('green');\n  const [status, setStatus] = useState(null);\n  const XorOArr = [\"0\", \"X\"]; //--> we're going to put either an X or an 0 into the status\n  //color palette\n\n  const palet = ['red', 'blue', 'green'];\n\n  const getRandomColor = () => palet[Math.floor(Math.random() * 3)];\n\n  useEffect(() => {\n    console.log(`useEffect rendering square ${id}`); //will tell us which square is being re-rendered\n    //when useEffect() is returning, we can pass it a function which will be called when it's unmounting the component\n\n    return () => console.log(`useEffect unmounting square ${id}`);\n  });\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: e => {\n      let col = getRandomColor();\n      setColor(col); //catching the next player (either an 0 or an X / a 0 or a 1)\n\n      let nextPlayer = newState(id);\n      setStatus(nextPlayer);\n      e.target.style.background = col;\n    },\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: XorOArr[status]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}; //parent component\n\n\n_s(Square, \"VVM2tdxLPcLEVhSufH1geVRv9LM=\");\n\n_c = Square;\n\nconst Board = () => {\n  _s2();\n\n  const [player, setPlayer] = useState(1); //initialize player to 1\n\n  console.log('Board (re-)rendering');\n  const [stateOfGame, setStateOfGame] = useState(Array(9).fill(null)); //change from empty array \n\n  let status = `Player ${player}`;\n  let winner = checkWinner(stateOfGame);\n  if (winner != null) status = `Player ${winner} wins`; //changing obj parameter to idOfSquare\n\n  const newState = idOfSquare => {\n    //new\n    let presentPlayer = player; //adding new change of state\n    //rearranging the overall order \n\n    stateOfGame[idOfSquare] = player; //player is present player/\"old\" player, that's been set in memory (0 or 1)\n    //set state again\n\n    setStateOfGame(stateOfGame); //state is array of 0 or 1 or null\n\n    let nextPlayer = (player + 1) % 2;\n    setPlayer(nextPlayer);\n    return presentPlayer;\n  }; //a function that creates the squares; square \"factory\"\n\n\n  function renderSquare(i) {\n    //*without the index argument, it doesn't work\n    return /*#__PURE__*/_jsxDEV(Square, {\n      id: i,\n      player: player,\n      newState: newState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 16\n    }, this); //adding the newState function here\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: [renderSquare(0), renderSquare(1), renderSquare(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: [renderSquare(3), renderSquare(4), renderSquare(5)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: [renderSquare(6), renderSquare(7), renderSquare(8)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"info\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(Board, \"F88NHv9oB/vrUhMn/Uq9ap6Oaj0=\");\n\n_c2 = Board;\nexport default Board;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");","map":{"version":3,"sources":["/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/to_github_backup/boglarkasebestyen.github.io/2nd_semester_assignments/tiktaktoe_react/src/Board.js"],"names":["React","useState","useEffect","checkWinner","Square","id","player","newState","color","setColor","status","setStatus","XorOArr","palet","getRandomColor","Math","floor","random","console","log","e","col","nextPlayer","target","style","background","Board","setPlayer","stateOfGame","setStateOfGame","Array","fill","winner","idOfSquare","presentPlayer","renderSquare","i"],"mappings":"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","sourcesContent":["\nimport React, {useState, useEffect} from \"react\";\nimport checkWinner from \"./checkWinner\";\n\n//new web component for the squares\n//child component\nconst Square = ({id, player, newState}) => { \n\n    const [color, setColor] = useState('green');\n\n    const [status, setStatus] = useState(null);\n    const XorOArr = [\"0\", \"X\"];     //--> we're going to put either an X or an 0 into the status\n\n    \n    //color palette\n    const palet = ['red', 'blue', 'green'];\n\n    const getRandomColor = () => palet[Math.floor(Math.random() * 3)]; \n\n  \n    useEffect(() => {\n        console.log(`useEffect rendering square ${id}`); //will tell us which square is being re-rendered\n        //when useEffect() is returning, we can pass it a function which will be called when it's unmounting the component\n        return () => console.log(`useEffect unmounting square ${id}`) \n    });\n\n    \n    return (\n        <button onClick={(e) => {\n            let col = getRandomColor();\n            setColor(col);\n\n            //catching the next player (either an 0 or an X / a 0 or a 1)\n            let nextPlayer = newState(id); \n\n            setStatus(nextPlayer);\n            e.target.style.background = col;\n        }}>\n            <h1>{XorOArr[status]}</h1>\n        </button>\n    )\n}\n\n\n//parent component\nconst Board = () => {\n    const [player, setPlayer] = useState(1); //initialize player to 1\n    console.log('Board (re-)rendering');\n\n    const [stateOfGame, setStateOfGame] = useState(Array(9).fill(null)); //change from empty array \n\n    let status = `Player ${player}`;\n    let winner = checkWinner(stateOfGame);\n\n    if (winner != null) status = `Player ${winner} wins`\n    \n   \n    //changing obj parameter to idOfSquare\n    const newState = (idOfSquare) => {\n        //new\n        let presentPlayer = player;\n\n        //adding new change of state\n        //rearranging the overall order \n        stateOfGame[idOfSquare] = player; //player is present player/\"old\" player, that's been set in memory (0 or 1)\n\n        //set state again\n        setStateOfGame(stateOfGame); //state is array of 0 or 1 or null\n\n        let nextPlayer = (player + 1) % 2;\n\n        setPlayer(nextPlayer);\n\n                               \n        return presentPlayer;\n    }\n    \n\n    //a function that creates the squares; square \"factory\"\n    function renderSquare(i) { //*without the index argument, it doesn't work\n        return <Square id={i} player={player} newState={newState}></Square>; //adding the newState function here\n    }\n    return (\n        <div\n        className=\"game-board\">\n            {/* creating a grid row in which we'll put the blue squares */}\n            <div className=\"grid-row\">\n                {renderSquare(0)}\n                {renderSquare(1)}\n                {renderSquare(2)}\n            </div>\n            <div className=\"grid-row\">\n                {renderSquare(3)}\n                {renderSquare(4)}\n                {renderSquare(5)}\n            </div>\n            <div className=\"grid-row\">\n                {renderSquare(6)}\n                {renderSquare(7)}\n                {renderSquare(8)}\n            </div>\n        <div id=\"info\">\n        {/* deleting the buttons, we don't need them anymore, anyway */}\n            <h1>{status}</h1>\n        </div>\n        </div>\n    );\n};\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}