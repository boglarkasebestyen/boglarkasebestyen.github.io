{"ast":null,"code":"var _jsxFileName = \"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/week16/Tic-Tac-Toe Exercise With React_starter/tiktaktoe_react/src/Board11.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n/* \n\nIn this video, Dr. Williams will review the progress you’ve made so far and build functionality \nto track the winner of the game. \n\nAs a next step, modify the colors so the “x” is one color and the “o” is another color.\n\n---\n\n- 1. what does the board need to keep track of:\n    - who has clicked where on the board\n    - keeping track of each square, square 0 (O) and square 1 (X)\n    - keeping track of whose turn is it to play next\n\n#we need to communicate all of these down to the Square component\n\nA more efficient way of keeping track of state: \n - all we need to know if it's an X or an O\n - have an array of 9 elements and fill in whether it's a 1 (X), 0 (O) or null\n - we'll also need to keep track of the next player\n\n\n- 2. what does the square need to keep track of:\n - keeps track of the mark made on it (X, O and null, null meaning it hasn't played yet)\n - we're also keeping track of the color, but that's not essential for the game\n\n #we'll need to figure out who's the winner\n  - loop over 8 winning combinations and check if state[i] in any line is the same\n  - if state[0] equals state[1] equals state[2] / are the same (not null) => winner\n\n winning combinations:\n\n  const win = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n  ];\n*/\nimport React, { useState, useEffect } from \"react\"; //new web component for the squares\n//child component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Square = ({\n  id,\n  player,\n  newState\n}) => {\n  _s();\n\n  const [color, setColor] = useState('green'); // X or 0\n\n  const [status, setStatus] = useState(null);\n  const xo = [\"0\", \"X\"]; //--> we're going to put either an X or an 0 into the status\n  //color palette\n\n  const palet = ['red', 'blue', 'green'];\n\n  const getRandomColor = () => palet[Math.floor(Math.random() * 3)];\n  /*\n  - we change the state of each square now, and we want to track if they're being re-rendered (is React re-rendering)?\n  - we can figure that out with useEffect()\n  */\n\n\n  useEffect(() => {\n    console.log(`useEffect rendering square ${id}`); //will tell us which square is being re-rendered\n    //when useEffect() is returning, we can pass it a function which will be called when it's unmounting the component\n\n    return () => console.log(`useEffect unmounting square ${id}`); //I think this was the console.log I couldn't implement before :/\n  }); //--> every time we change the state, it's unmounting and then re-rendering\n  //--> it's still a forced (by us, on purpose) unmounting/mounting causing React to re-render\n\n  return (\n    /*#__PURE__*/\n    //making each of the blue squares a button\n    //updated to new version of setColor() from the last video, Board8.js\n    _jsxDEV(\"button\", {\n      onClick: e => {\n        let col = getRandomColor();\n        setColor(col); //catching the next player (either an 0 or an X / a 0 or a 1)\n\n        let nextPlayer = newState({\n          id: id,\n          color: col\n        }); //takes this object and puts it in the array / stateOfGame variable of Board\n\n        setStatus(nextPlayer);\n        e.target.style.background = col;\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: xo[status]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)\n  );\n}; //parent component\n\n\n_s(Square, \"VVM2tdxLPcLEVhSufH1geVRv9LM=\");\n\n_c = Square;\n\nconst Board11 = () => {\n  _s2();\n\n  //new prop: player\n  const [player, setPlayer] = useState(1); //initialize player to 1\n\n  console.log('Board (re-)rendering'); //simulating the mount/unmount hook, I guess?\n\n  const [mounted, setMounted] = useState(true); //this random nr will cause the re-render because the state has changed\n\n  const [random, setRandom] = useState(0); //tracking a new state that is the total state of the game (I renamed it from state to stateOfGame)\n  //as things are clicked, we're gonna add them to this empty array O.o\n\n  const [stateOfGame, setStateOfGame] = useState(Array(9).fill(null)); //change from empty array \n\n  /*\n      //NEW: we changed it a bit, we added a next player and set the nextPlayer's state, too:\n  */\n  // const newState = (obj) => {\n  //     setStateOfGame([...stateOfGame, obj]); //we'll expand state and add to it the object\n  //     console.log(`Adding state ${JSON.stringify(stateOfGame)}`)\n  // }\n  //NEW Board11 version: changing obj to idOfSquare\n\n  const newState = obj => {\n    let presentPlayer = player; //adding new change of state\n    //rearranging the order \n\n    stateOfGame[idOfSquare] = player; //player is present player, or old player, that's been set in memory (0 or 1)\n    //set state again\n\n    setStateOfGame(stateOfGame); //state is array of 0 or 1 or null\n\n    let nextPlayer = (player + 1) % 2;\n    setPlayer(nextPlayer);\n    console.log(`Adding state ${JSON.stringify(stateOfGame)}`);\n    status = `Player ${nextPlayer}`;\n    return presentPlayer;\n  }; //now we'll need to call this function from our Square component (in renderSquare) / when clicking on the squares\n  /////////////////////////////////\n\n\n  let status = `Player ${player}`; //part of mount\n  //1st click: unmounts, click again: mounts\n\n  const toggle = () => setMounted(!mounted);\n\n  const reRender = () => setRandom(Math.random()); //a function that creates the squares; square \"factory\"\n\n\n  function renderSquare(i) {\n    //*without the index argument, it doesn't work\n    return /*#__PURE__*/_jsxDEV(Square, {\n      id: i,\n      player: player,\n      newState: newState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 16\n    }, this); //adding the newState function here\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: [mounted && renderSquare(0), mounted && renderSquare(1), mounted && renderSquare(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"info\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggle,\n        children: \"Show / hide row\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: reRender,\n        children: \"Re-render\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(Board11, \"5Mf37n65oLTS5CbpJU/eProHObw=\");\n\n_c2 = Board11;\nexport default Board11;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board11\");","map":{"version":3,"sources":["/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/week16/Tic-Tac-Toe Exercise With React_starter/tiktaktoe_react/src/Board11.js"],"names":["React","useState","useEffect","Square","id","player","newState","color","setColor","status","setStatus","xo","palet","getRandomColor","Math","floor","random","console","log","e","col","nextPlayer","target","style","background","Board11","setPlayer","mounted","setMounted","setRandom","stateOfGame","setStateOfGame","Array","fill","obj","presentPlayer","idOfSquare","JSON","stringify","toggle","reRender","renderSquare","i"],"mappings":"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","sourcesContent":["/* \n\nIn this video, Dr. Williams will review the progress you’ve made so far and build functionality \nto track the winner of the game. \n\nAs a next step, modify the colors so the “x” is one color and the “o” is another color.\n\n---\n\n- 1. what does the board need to keep track of:\n    - who has clicked where on the board\n    - keeping track of each square, square 0 (O) and square 1 (X)\n    - keeping track of whose turn is it to play next\n\n#we need to communicate all of these down to the Square component\n\nA more efficient way of keeping track of state: \n - all we need to know if it's an X or an O\n - have an array of 9 elements and fill in whether it's a 1 (X), 0 (O) or null\n - we'll also need to keep track of the next player\n\n\n- 2. what does the square need to keep track of:\n - keeps track of the mark made on it (X, O and null, null meaning it hasn't played yet)\n - we're also keeping track of the color, but that's not essential for the game\n\n #we'll need to figure out who's the winner\n  - loop over 8 winning combinations and check if state[i] in any line is the same\n  - if state[0] equals state[1] equals state[2] / are the same (not null) => winner\n\n winning combinations:\n\n  const win = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n  ];\n*/\n\nimport React, {useState, useEffect} from \"react\";\n\n//new web component for the squares\n//child component\nconst Square = ({id, player, newState}) => { \n    const [color, setColor] = useState('green');\n\n    // X or 0\n    const [status, setStatus] = useState(null);\n    const xo = [\"0\", \"X\"];                            //--> we're going to put either an X or an 0 into the status\n\n    \n\n    //color palette\n    const palet = ['red', 'blue', 'green'];\n\n    const getRandomColor = () => palet[Math.floor(Math.random() * 3)]; \n\n    /*\n    - we change the state of each square now, and we want to track if they're being re-rendered (is React re-rendering)?\n    - we can figure that out with useEffect()\n    */\n\n    useEffect(() => {\n        console.log(`useEffect rendering square ${id}`); //will tell us which square is being re-rendered\n        //when useEffect() is returning, we can pass it a function which will be called when it's unmounting the component\n        return () => console.log(`useEffect unmounting square ${id}`) //I think this was the console.log I couldn't implement before :/\n    });\n\n    //--> every time we change the state, it's unmounting and then re-rendering\n    //--> it's still a forced (by us, on purpose) unmounting/mounting causing React to re-render\n\n    return (\n    //making each of the blue squares a button\n    //updated to new version of setColor() from the last video, Board8.js\n        <button onClick={(e) => {\n            let col = getRandomColor();\n            setColor(col);\n            //catching the next player (either an 0 or an X / a 0 or a 1)\n            let nextPlayer = newState({id:id, color:col}); //takes this object and puts it in the array / stateOfGame variable of Board\n            setStatus(nextPlayer);\n            e.target.style.background = col;\n        }}>\n            <h1>{xo[status]}</h1>\n        </button>\n    )\n}\n\n\n//parent component\nconst Board11 = () => {\n    //new prop: player\n    const [player, setPlayer] = useState(1); //initialize player to 1\n    console.log('Board (re-)rendering');\n\n    //simulating the mount/unmount hook, I guess?\n    const [mounted, setMounted] = useState(true);\n\n    //this random nr will cause the re-render because the state has changed\n    const [random, setRandom] = useState(0);\n\n    //tracking a new state that is the total state of the game (I renamed it from state to stateOfGame)\n    //as things are clicked, we're gonna add them to this empty array O.o\n    const [stateOfGame, setStateOfGame] = useState(Array(9).fill(null)); //change from empty array \n\n    /*\n   \n    //NEW: we changed it a bit, we added a next player and set the nextPlayer's state, too:\n    */\n    \n    // const newState = (obj) => {\n    //     setStateOfGame([...stateOfGame, obj]); //we'll expand state and add to it the object\n    //     console.log(`Adding state ${JSON.stringify(stateOfGame)}`)\n    // }\n\n    //NEW Board11 version: changing obj to idOfSquare\n    const newState = (obj) => {\n        let presentPlayer = player;\n        //adding new change of state\n        //rearranging the order \n        stateOfGame[idOfSquare] = player; //player is present player, or old player, that's been set in memory (0 or 1)\n\n        //set state again\n        setStateOfGame(stateOfGame); //state is array of 0 or 1 or null\n\n        let nextPlayer = (player + 1) % 2;\n\n        setPlayer(nextPlayer);\n\n        console.log(`Adding state ${JSON.stringify(stateOfGame)}`);\n        status = `Player ${nextPlayer}`;\n        return presentPlayer;\n    }\n\n    //now we'll need to call this function from our Square component (in renderSquare) / when clicking on the squares\n\n    /////////////////////////////////\n\n    let status = `Player ${player}`;\n\n    //part of mount\n    //1st click: unmounts, click again: mounts\n    const toggle = () => setMounted(!mounted);\n    const reRender = () => setRandom(Math.random());\n    \n\n    //a function that creates the squares; square \"factory\"\n    function renderSquare(i) { //*without the index argument, it doesn't work\n        return <Square id={i} player={player} newState={newState}></Square>; //adding the newState function here\n    }\n    return (\n        <div\n        className=\"game-board\">\n            {/* creating a grid row in which we'll put the blue squares */}\n            <div className=\"grid-row\">\n            {/* *the numbers (arguments) can be the ids of the squares */}\n            {/* we will need to be able to flip these on and off, stop the rendering, so let's simulate a component unmount hook*/}\n            {/* if it's mounted, renderSquare will be called */}\n                {mounted && renderSquare(0)}\n                {mounted && renderSquare(1)}\n                {mounted && renderSquare(2)}\n            </div>\n        <div id=\"info\">\n            <button onClick={toggle}>Show / hide row</button>\n            {/* forcing a re-render, both parent (board) and child (squares) */}\n            <button onClick={reRender}>Re-render</button>\n            <h1>{status}</h1>\n        </div>\n        </div>\n    );\n};\n\nexport default Board11;\n"]},"metadata":{},"sourceType":"module"}