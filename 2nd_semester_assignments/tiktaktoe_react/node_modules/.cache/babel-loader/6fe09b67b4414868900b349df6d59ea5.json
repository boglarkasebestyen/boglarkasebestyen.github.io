{"ast":null,"code":"var _jsxFileName = \"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/week16/Tic-Tac-Toe Exercise With React_starter/tiktaktoe_react/src/Board6.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n/* What we did here:\n\nNow, you’ll build on the work you did to mount and unmount square components. \n\nIn this video, you’ll learn how to force a child re-render from the parent component. \nThis occurs because you're changing the state of the parent (board), which triggers a change \nin the state of the child (square components).\n*/\nimport React, { useState } from \"react\"; //new web component for the squares\n//child component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Square = ({\n  id,\n  player\n}) => {\n  _s();\n\n  //picking up the properties. passing it in from the parent via the properties into the child\n  //keeping track of the state of the square\n  //by initializing it to green, all of them will be green when clicked the 1st time\n  //all 3 squares have an independent state, they all go green first\n  //picking up a new prop: player\n  const [color, setColor] = useState('green'); //color palette\n\n  const palet = ['red', 'blue', 'green']; //let's have a function that gives us a random color\n\n  const getRandomColor = () => palet[Math.floor(Math.random() * 3)]; //skipping {} and return\n  //making each of the blue squares a button\n\n\n  return (\n    /*#__PURE__*/\n    //changing the color of Square on the click\n    _jsxDEV(\"button\", {\n      onClick: e => {\n        //now that we track state, we can write:\n        setColor(getRandomColor());\n        e.target.style.background = color; // e.target.style.background = getRandomColor();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: player\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), console.log(`Render ${id}`)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)\n  );\n}; //parent component\n\n\n_s(Square, \"dwnxPG6YFz8kMgdAt7C7tu54R/Y=\");\n\n_c = Square;\n\nconst Board6 = () => {\n  _s2();\n\n  const [player, setPlayer] = useState(1); //initialize player to 1\n  //simulating the mount/unmount hook\n\n  const [mounted, setMounted] = useState(true); //this random nr will cause the re-render\n\n  const [random, setRandom] = setRandom(Math.random());\n  let status = `Player ${player}`; //part of mount\n  //1st click: unmounts, click again: mounts\n  //in the lesson, it was console.logged. I failed implementing that :/\n\n  const toggle = () => {\n    setMounted(!mounted);\n  }; //a function that creates the squares; square \"factory\"\n\n\n  function renderSquare(i) {\n    //*without the index argument, it doesn't work\n    return /*#__PURE__*/_jsxDEV(Square, {\n      id: i,\n      player: player\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 16\n    }, this); //**this index. we also added a new property: player\n    //getting the value of **the index that's passed in as an argument for the function\n    //id={i} is a property for Square\n    //but how do we pick this up in the Square component itself? : with props!\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: [mounted && renderSquare(0), mounted && renderSquare(1), mounted && renderSquare(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"info\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggle,\n        children: \"Show / hide row\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: reRender,\n        children: \"Re-render\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(Board6, \"E1Vv47cCorq38FeHG5ma3pjceHY=\");\n\n_c2 = Board6;\nexport default Board6;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board6\");","map":{"version":3,"sources":["/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/week16/Tic-Tac-Toe Exercise With React_starter/tiktaktoe_react/src/Board6.js"],"names":["React","useState","Square","id","player","color","setColor","palet","getRandomColor","Math","floor","random","e","target","style","background","console","log","Board6","setPlayer","mounted","setMounted","setRandom","status","toggle","renderSquare","i","reRender"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B,C,CAEA;AACA;;;;AACA,MAAMC,MAAM,GAAG,CAAC;AAACC,EAAAA,EAAD;AAAKC,EAAAA;AAAL,CAAD,KAAkB;AAAA;;AAAE;AAC/B;AACA;AACA;AAEA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,OAAD,CAAlC,CAN6B,CAQ7B;;AACA,QAAMM,KAAK,GAAG,CAAC,KAAD,EAAQ,MAAR,EAAgB,OAAhB,CAAd,CAT6B,CAW7B;;AACA,QAAMC,cAAc,GAAG,MAAMD,KAAK,CAACE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAD,CAAlC,CAZ6B,CAa7B;AAEA;;;AACA;AAAA;AACI;AACA;AAAQ,MAAA,OAAO,EAAGC,CAAD,IAAO;AACpB;AACAN,QAAAA,QAAQ,CAACE,cAAc,EAAf,CAAR;AACAI,QAAAA,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeC,UAAf,GAA4BV,KAA5B,CAHoB,CAIpB;AACH,OALD;AAAA,8BAQI;AAAA,kBAAKD;AAAL;AAAA;AAAA;AAAA;AAAA,cARJ,EAUKY,OAAO,CAACC,GAAR,CAAa,UAASd,EAAG,EAAzB,CAVL;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAeH,CA/BD,C,CAkCA;;;GAlCMD,M;;KAAAA,M;;AAmCN,MAAMgB,MAAM,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACd,MAAD,EAASe,SAAT,IAAsBlB,QAAQ,CAAC,CAAD,CAApC,CADiB,CACwB;AACzC;;AACA,QAAM,CAACmB,OAAD,EAAUC,UAAV,IAAwBpB,QAAQ,CAAC,IAAD,CAAtC,CAHiB,CAKjB;;AACA,QAAM,CAACU,MAAD,EAASW,SAAT,IAAsBA,SAAS,CAACb,IAAI,CAACE,MAAL,EAAD,CAArC;AAEA,MAAIY,MAAM,GAAI,UAASnB,MAAO,EAA9B,CARiB,CAUjB;AACA;AACA;;AACA,QAAMoB,MAAM,GAAG,MAAM;AACjBH,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACH,GAFD,CAbiB,CAiBjB;;;AACA,WAASK,YAAT,CAAsBC,CAAtB,EAAyB;AAAE;AACvB,wBAAO,QAAC,MAAD;AAAQ,MAAA,EAAE,EAAEA,CAAZ;AAAe,MAAA,MAAM,EAAEtB;AAAvB;AAAA;AAAA;AAAA;AAAA,YAAP,CADqB,CAC4B;AACjD;AACA;AACA;AACH;;AACD,sBACI;AACA,IAAA,SAAS,EAAC,YADV;AAAA,4BAGI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,iBAIKgB,OAAO,IAAIK,YAAY,CAAC,CAAD,CAJ5B,EAKKL,OAAO,IAAIK,YAAY,CAAC,CAAD,CAL5B,EAMKL,OAAO,IAAIK,YAAY,CAAC,CAAD,CAN5B;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAWA;AAAK,MAAA,EAAE,EAAC,MAAR;AAAA,8BACI;AAAQ,QAAA,OAAO,EAAED,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAGI;AAAQ,QAAA,OAAO,EAAEG,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAA,kBAAKJ;AAAL;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAXA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CA5CD;;IAAML,M;;MAAAA,M;AA8CN,eAAeA,MAAf","sourcesContent":["/* What we did here:\n\nNow, you’ll build on the work you did to mount and unmount square components. \n\nIn this video, you’ll learn how to force a child re-render from the parent component. \nThis occurs because you're changing the state of the parent (board), which triggers a change \nin the state of the child (square components).\n*/\n\nimport React, {useState} from \"react\";\n\n//new web component for the squares\n//child component\nconst Square = ({id, player}) => { //picking up the properties. passing it in from the parent via the properties into the child\n    //keeping track of the state of the square\n    //by initializing it to green, all of them will be green when clicked the 1st time\n    //all 3 squares have an independent state, they all go green first\n\n    //picking up a new prop: player\n    const [color, setColor] = useState('green');\n\n    //color palette\n    const palet = ['red', 'blue', 'green'];\n\n    //let's have a function that gives us a random color\n    const getRandomColor = () => palet[Math.floor(Math.random() * 3)]; \n    //skipping {} and return\n\n    //making each of the blue squares a button\n    return (\n        //changing the color of Square on the click\n        <button onClick={(e) => {\n            //now that we track state, we can write:\n            setColor(getRandomColor());\n            e.target.style.background = color;\n            // e.target.style.background = getRandomColor();\n        }}>\n            {/* <h1>{id}</h1> */}\n            {/* instead of ID, let's put player */}\n            <h1>{player}</h1>\n            {/* shows the rendering */}\n            {console.log(`Render ${id}`)}\n        </button>\n    )\n}\n\n\n//parent component\nconst Board6 = () => {\n    const [player, setPlayer] = useState(1); //initialize player to 1\n    //simulating the mount/unmount hook\n    const [mounted, setMounted] = useState(true);\n\n    //this random nr will cause the re-render\n    const [random, setRandom] = setRandom(Math.random());\n\n    let status = `Player ${player}`;\n\n    //part of mount\n    //1st click: unmounts, click again: mounts\n    //in the lesson, it was console.logged. I failed implementing that :/\n    const toggle = () => {\n        setMounted(!mounted);\n    }\n\n    //a function that creates the squares; square \"factory\"\n    function renderSquare(i) { //*without the index argument, it doesn't work\n        return <Square id={i} player={player}></Square>; //**this index. we also added a new property: player\n        //getting the value of **the index that's passed in as an argument for the function\n        //id={i} is a property for Square\n        //but how do we pick this up in the Square component itself? : with props!\n    }\n    return (\n        <div\n        className=\"game-board\">\n            {/* creating a grid row in which we'll put the blue squares */}\n            <div className=\"grid-row\">\n            {/* *the numbers (arguments) can be the ids of the squares */}\n            {/* we will need to be able to flip these on and off, stop the rendering, so let's simulate a component unmount hook*/}\n            {/* if it's mounted, renderSquare will be called */}\n                {mounted && renderSquare(0)}\n                {mounted && renderSquare(1)}\n                {mounted && renderSquare(2)}\n            </div>\n        <div id=\"info\">\n            <button onClick={toggle}>Show / hide row</button>\n            {/* forcing a re-render, but I don't get it why */}\n            <button onClick={reRender}>Re-render</button>\n            <h1>{status}</h1>\n        </div>\n        </div>\n    );\n};\n\nexport default Board6;\n"]},"metadata":{},"sourceType":"module"}