{"ast":null,"code":"import React from \"react\";\n\nfunction checkWinner(state) {\n  //state is an array of 0 and 1 and null\n  const win = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < win.length; i++) {\n    const [a, b, c] = win[i]; // const [a,b,c] is each of the numbers, win[i] is the row\n\n    if (state[a] == state[b] && state[a] == state[c] && state[a]) //and state of a is not null (the last one)\n      return state[a]; //state[a] will either be a 0 or a 1, we've got a winning combination\n  }\n\n  return null;\n}\n\nexport default checkWinner;","map":{"version":3,"sources":["/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/to_github_backup/boglarkasebestyen.github.io/2nd_semester_assignments/tiktaktoe_react/src/checkWinner.js"],"names":["React","checkWinner","state","win","i","length","a","b","c"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AACxB;AAEA,QAAMC,GAAG,GAAG,CACR,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADQ,EAER,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFQ,EAGR,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHQ,EAIR,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJQ,EAKR,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALQ,EAMR,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANQ,EAOR,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPQ,EAQR,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CARQ,CAAZ;;AAWA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,GAAG,CAACE,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAChC,UAAM,CAACE,CAAD,EAAGC,CAAH,EAAKC,CAAL,IAAUL,GAAG,CAACC,CAAD,CAAnB,CADgC,CACR;;AACxB,QAAIF,KAAK,CAACI,CAAD,CAAL,IAAYJ,KAAK,CAACK,CAAD,CAAjB,IAAwBL,KAAK,CAACI,CAAD,CAAL,IAAYJ,KAAK,CAACM,CAAD,CAAzC,IAAgDN,KAAK,CAACI,CAAD,CAAzD,EAA8D;AAC1D,aAAOJ,KAAK,CAACI,CAAD,CAAZ,CAH4B,CAGX;AACxB;;AACD,SAAO,IAAP;AACH;;AAED,eAAeL,WAAf","sourcesContent":["import React from \"react\";\n\nfunction checkWinner(state) {\n    //state is an array of 0 and 1 and null\n\n    const win = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n\n    for(let i = 0; i < win.length; i++) {\n        const [a,b,c] = win[i]; // const [a,b,c] is each of the numbers, win[i] is the row\n        if (state[a] == state[b] && state[a] == state[c] && state[a]) //and state of a is not null (the last one)\n            return state[a]; //state[a] will either be a 0 or a 1, we've got a winning combination\n    }\n    return null;\n}\n\nexport default checkWinner;"]},"metadata":{},"sourceType":"module"}