{"ast":null,"code":"var _jsxFileName = \"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/bad_bank_assignment/bad_bank_react/src/CreateAccount.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext, useContext } from \"react\";\nimport Card from \"./Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction CreateAccount() {\n  _s();\n\n  const [show, setShow] = useState(true);\n  const [status, setStatus] = useState(\"\");\n  let [name, setName] = useState(\"\");\n  let [email, setEmail] = useState(\"\");\n  let [password, setPassword] = useState(\"\");\n  let [nameError, setNameError] = useState(\"\");\n  let [emailError, setEmailError] = useState(\"\");\n  let [passwError, setPasswError] = useState(\"\");\n  const MyContext = /*#__PURE__*/createContext(null); //creates a Context object\n\n  const context = useContext(MyContext); //validation, given code\n  // const validate = (fieldName, statusText) => {\n  //     if (!fieldName) {\n  //         setStatus(\"Error: \" + statusText);\n  //         setTimeout(() => setStatus(\"\"), 3000); //why is setStatus(\"\") called with an empty string?\n  //         return false; //validation is false\n  //     }\n  //     return true;  //validation is true\n  // }\n\n  const validate = () => {\n    //we need these to reset the values, it's buggy otherwise\n    setNameError(\"\");\n    setEmailError(\"\");\n    setPasswError(\"\"); //error strings\n\n    let nameErrorStr = \"\";\n    let emailErrorStr = \"\";\n    let passwErrorStr = \"\";\n    let emailFormat = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,4}$/; //email format function\n\n    let isValidFormat = str => {\n      return str.match(emailFormat);\n    }; ////\n    //EMPTY FIELDS (was required):\n\n\n    if (!name) {\n      nameErrorStr = \"Oops! Your name can't be blank.\";\n    }\n\n    if (!email) {\n      emailErrorStr = \"Oops! Your email can't be blank.\";\n    }\n\n    if (!password) {\n      passwErrorStr = \"Oops! Your password can't be blank.\";\n    } //ADDITIONAL VALIDATION\n    //name length (was not required)\n\n\n    if (name.length < 4) {\n      nameErrorStr = \"Name must be longer than that.\";\n    } //limiting input to letters \n\n\n    let handleKeyPress = event => {\n      let allowedChars = \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\";\n      let currentChar = event.key;\n      let found = false;\n\n      for (let i = 0; i < allowedChars.length; i++) {\n        if (currentChar == allowedChars[i]) {\n          found = true;\n        }\n      }\n\n      if (found == false) {\n        return;\n      }\n    }; //email format (was not required)\n\n\n    if (!isValidFormat(email)) {\n      emailErrorStr = \"Oops! Invalid e-mail.\";\n    } //password length (was required)\n\n\n    if (password.length < 8) {\n      console.log(password.length);\n      passwErrorStr = \"Password must be longer than that.\";\n    } //error messages when inputs are left blank (was required)\n\n\n    if (nameErrorStr || emailErrorStr || passwErrorStr) {\n      setNameError(nameErrorStr);\n      setEmailError(emailErrorStr);\n      setPasswError(passwErrorStr);\n      return false; //validation is false\n    }\n\n    return true; //validation is false\n  }; //validation on onClick / Create Account button\n\n\n  const handleClick = e => {\n    if (!validate()) {\n      //if the validation is false, do all those things I wrote above :P\n      return;\n    } //lenghty, my version, but the same as the given code below\n    // if (!validate(name, 'Please enter name')) {\n    //     return;\n    // } else if(!validate(email, 'Please enter email address')) {\n    //     return;\n    // } else if(!validate(password, 'Please enter password')) {\n    //     return;\n    // }\n    //short version / given code, it didn't return all 3 error messages, only name's error message\n    // if (!validate(name, 'Please enter name')) return;\n    // if (!validate(email, 'Please enter email address')) return;\n    // if (!validate(password, 'Please enter password')) return;\n    //dunno what this does, GOTTA GET BACK HERE\n    // context.users.push({name, email, password, balance:100});\n    // ez kell\n    // context.users.push({name, email, password});\n    // setShow(false);\n\n  }; //when all 3 pass validate, it crashes\n  //form input \n  //can't have same function for all 3 as in the helper code I got (right?)\n\n\n  const handleNameChange = e => {\n    setName(e.currentTarget.value);\n  };\n\n  const handleEmailChange = e => {\n    setEmail(e.currentTarget.value);\n  };\n\n  const handlePasswordChange = e => {\n    setPassword(e.currentTarget.value);\n  };\n\n  const clearForm = () => {\n    setName(\"\");\n    setEmail(\"\");\n    setPassword(\"\");\n    setShow(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    bgcolor: \"info\",\n    header: \"Open Account\",\n    status: status,\n    body: show ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"create mb-3\",\n        children: \"Open an account that fits your needs!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: nameError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: emailError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: passwError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"input\",\n        className: \"form-control\",\n        id: \"name\",\n        placeholder: \"Your name is...\",\n        value: name,\n        onChange: handleNameChange,\n        onKeyPress: event => handleKeyPress()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 187\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        children: \"Email address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"input\",\n        className: \"form-control\",\n        id: \"email\",\n        placeholder: \"Your email address is...\",\n        value: email,\n        onChange: handleEmailChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 160\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        className: \"form-control\",\n        id: \"password\",\n        placeholder: \"Create a password\",\n        value: password,\n        onChange: handlePasswordChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 165\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !name || !email || !password,\n        className: \"btn btn-light myButton\",\n        onClick: e => handleClick(),\n        children: \"Create Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n        children: \"Success\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-light\",\n        onClick: clearForm,\n        children: \"Add another account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CreateAccount, \"XTW4KfzyipKRwxgBzFAn41dIN9A=\");\n\n_c = CreateAccount;\nexport default CreateAccount;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateAccount\");","map":{"version":3,"sources":["/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/bad_bank_assignment/bad_bank_react/src/CreateAccount.js"],"names":["React","useState","createContext","useContext","Card","CreateAccount","show","setShow","status","setStatus","name","setName","email","setEmail","password","setPassword","nameError","setNameError","emailError","setEmailError","passwError","setPasswError","MyContext","context","validate","nameErrorStr","emailErrorStr","passwErrorStr","emailFormat","isValidFormat","str","match","length","handleKeyPress","event","allowedChars","currentChar","key","found","i","console","log","handleClick","e","handleNameChange","currentTarget","value","handleEmailChange","handlePasswordChange","clearForm"],"mappings":"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","sourcesContent":["import React, {useState, createContext, useContext} from \"react\";\nimport Card from \"./Card\";\n\nfunction CreateAccount() {\n    const [show, setShow] = useState(true);\n    const [status, setStatus] = useState(\"\");\n    let [name, setName] = useState(\"\");\n    let [email, setEmail] = useState(\"\");\n    let [password, setPassword] = useState(\"\");\n    let [nameError, setNameError] = useState(\"\");\n    let [emailError, setEmailError] = useState(\"\");\n    let [passwError, setPasswError] = useState(\"\");\n\n\n    const MyContext = createContext(null); //creates a Context object\n    const context = useContext(MyContext);  \n  \n    //validation, given code\n    // const validate = (fieldName, statusText) => {\n    //     if (!fieldName) {\n    //         setStatus(\"Error: \" + statusText);\n    //         setTimeout(() => setStatus(\"\"), 3000); //why is setStatus(\"\") called with an empty string?\n    //         return false; //validation is false\n    //     }\n    //     return true;  //validation is true\n    // }\n\n\n    const validate = () => {\n        //we need these to reset the values, it's buggy otherwise\n        setNameError(\"\");\n        setEmailError(\"\");\n        setPasswError(\"\");\n\n        //error strings\n        let nameErrorStr = \"\";\n        let emailErrorStr = \"\";\n        let passwErrorStr = \"\";\n\n        let emailFormat = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,4}$/; \n        //email format function\n        let isValidFormat = (str) => {\n            return str.match(emailFormat)\n        }\n\n        ////\n\n        //EMPTY FIELDS (was required):\n        if(!name) {\n            nameErrorStr = \"Oops! Your name can't be blank.\";\n        }\n\n        if(!email) {\n            emailErrorStr = \"Oops! Your email can't be blank.\"\n        }\n\n        if(!password) {\n            passwErrorStr = \"Oops! Your password can't be blank.\"\n        }\n\n        //ADDITIONAL VALIDATION\n        //name length (was not required)\n        if(name.length < 4) {\n            nameErrorStr = \"Name must be longer than that.\"\n        }\n\n        //limiting input to letters \n        let handleKeyPress = event => {\n            let allowedChars = \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\";\n            let currentChar = event.key;\n            let found = false;\n            for (let i = 0; i < allowedChars.length; i++) {\n                if (currentChar == allowedChars[i]) {\n                    found = true;\n                }\n            }\n            if(found == false) {\n                return;\n            }\n        }\n\n\n        //email format (was not required)\n        if(!isValidFormat(email)) {\n            emailErrorStr = \"Oops! Invalid e-mail.\"\n        }\n\n        //password length (was required)\n        if(password.length < 8) {\n            console.log(password.length)\n            passwErrorStr = \"Password must be longer than that.\"\n        }\n\n        //error messages when inputs are left blank (was required)\n        if(nameErrorStr || emailErrorStr || passwErrorStr) {\n            setNameError(nameErrorStr);\n            setEmailError(emailErrorStr);\n            setPasswError(passwErrorStr);\n            return false; //validation is false\n        }\n        return true; //validation is false\n    }\n\n    //validation on onClick / Create Account button\n    const handleClick = e => {\n        if(!validate()) { //if the validation is false, do all those things I wrote above :P\n            return;\n        }\n        \n        //lenghty, my version, but the same as the given code below\n        // if (!validate(name, 'Please enter name')) {\n        //     return;\n        // } else if(!validate(email, 'Please enter email address')) {\n        //     return;\n        // } else if(!validate(password, 'Please enter password')) {\n        //     return;\n        // }\n\n        //short version / given code, it didn't return all 3 error messages, only name's error message\n        // if (!validate(name, 'Please enter name')) return;\n        // if (!validate(email, 'Please enter email address')) return;\n        // if (!validate(password, 'Please enter password')) return;\n        \n        //dunno what this does, GOTTA GET BACK HERE\n        // context.users.push({name, email, password, balance:100});\n        // ez kell\n        // context.users.push({name, email, password});\n        // setShow(false);\n    }    \n    //when all 3 pass validate, it crashes\n\n    \n    //form input \n    //can't have same function for all 3 as in the helper code I got (right?)\n    const handleNameChange = e => {\n        setName(e.currentTarget.value);\n    }\n\n    const handleEmailChange = e => {\n        setEmail(e.currentTarget.value);\n    }\n\n    const handlePasswordChange = e => {\n        setPassword(e.currentTarget.value);\n    }\n\n\n    const clearForm = () => {\n        setName(\"\");\n        setEmail(\"\");\n        setPassword(\"\");\n        setShow(true);\n    }\n\n    return (\n        <Card\n            bgcolor=\"info\"\n            header=\"Open Account\"\n            status={status}\n            body={show ? (  \n                <>\n                    <h5 className=\"create mb-3\">Open an account that fits your needs!</h5>\n\n                    <div>\n                        <div className=\"error\">{nameError}</div>\n                        <div className=\"error\">{emailError}</div>\n                        <div className=\"error\">{passwError}</div>\n                    </div>\n                    \n                    <h6>Name</h6>\n                    <input type=\"input\" className=\"form-control\" id=\"name\" placeholder=\"Your name is...\" value={name} onChange={handleNameChange} onKeyPress={event => handleKeyPress()}/><br/>\n                    \n                    <h6>Email address</h6>\n                    <input type=\"input\" className=\"form-control\" id=\"email\" placeholder=\"Your email address is...\" value={email} onChange={handleEmailChange}/><br/>\n\n                    <h6>Password</h6>\n                    <input type=\"password\" className=\"form-control\" id=\"password\" placeholder=\"Create a password\" value={password} onChange={handlePasswordChange}/><br/>\n                    <button type=\"submit\" disabled={!name || !email || !password} className=\"btn btn-light myButton\" onClick={e => handleClick()}>Create Account</button>\n                    </>\n                    ):(\n                    <>\n                    <h6>Success</h6>\n                    <button type=\"submit\" className=\"btn btn-light\" onClick={clearForm}>Add another account</button>\n                </>\n            )}\n        />\n    )\n}\n\nexport default CreateAccount;"]},"metadata":{},"sourceType":"module"}