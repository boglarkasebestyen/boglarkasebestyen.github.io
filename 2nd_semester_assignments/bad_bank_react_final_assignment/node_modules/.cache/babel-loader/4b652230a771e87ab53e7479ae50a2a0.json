{"ast":null,"code":"var _jsxFileName = \"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/bad_bank_assignment/bad_bank_react/src/CreateAccount.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext, useContext } from \"react\";\nimport Card from \"./Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction CreateAccount() {\n  _s();\n\n  const [successMessageVisible, setSuccessMessageVisible] = useState(false); //instead of \"show\" initialized with true...\n  // const [status, setStatus] = useState(\"\");\n\n  let [name, setName] = useState(\"\");\n  let [email, setEmail] = useState(\"\");\n  let [password, setPassword] = useState(\"\");\n  let [nameError, setNameError] = useState(\"\");\n  let [emailError, setEmailError] = useState(\"\");\n  let [passwError, setPasswError] = useState(\"\");\n  const MyContext = /*#__PURE__*/createContext(null); //creates a Context object\n\n  const context = useContext(MyContext); //I'll put error strings here so I don't have to declare it in the validateName() function\n\n  let nameErrorStr = \"\";\n  let emailErrorStr = \"\";\n  let passwErrorStr = \"\";\n\n  const validate = () => {\n    setEmailError(\"\");\n\n    if (!email) {\n      emailErrorStr = \"Oops! Your email can't be blank.\";\n      setEmailError(emailErrorStr);\n      return false;\n    }\n\n    setNameError(\"\");\n\n    if (!name) {\n      nameErrorStr = \"Oops! Your name can't be blank.\";\n      setNameError(nameErrorStr);\n      return false;\n    }\n\n    setPasswError(\"\");\n\n    if (!password) {\n      passwErrorStr = \"Oops! Your password can't be blank.\";\n      setPasswError(passwErrorStr);\n      return false;\n    }\n\n    return validateName(name) && validateEmail(email) && validatePassword(password);\n  }; //validation ends\n  //limiting input to the letters of the English alphabet\n\n\n  const validateName = newName => {\n    setNameError(\"\"); //NO INPUT + ADDITIONAL VALIDATION\n    //NAME\n    //additional: name length \n\n    if (name.length < 3) {\n      nameErrorStr = \"Name must be longer than that.\";\n    } else if (!newName.match(/^[a-z][a-z\\s]*$/)) {\n      nameErrorStr = \"Enter only letters\";\n    }\n\n    if (nameErrorStr !== \"\") {\n      setNameError(nameErrorStr);\n      return false;\n    }\n\n    return true;\n  };\n\n  const validateEmail = email => {\n    setEmailError(\"\");\n    let emailFormat = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,4}$/; //email format function\n\n    let isValidFormat = str => {\n      return str.match(emailFormat);\n    }; //EMAIL\n    //additional: email length, email format \n\n\n    if (email.length == 1) {\n      emailErrorStr = \"Name must be longer than that.\";\n    } else if (!isValidFormat(email)) {\n      emailErrorStr = \"Oops! Invalid e-mail.\";\n    }\n\n    if (emailErrorStr !== \"\") {\n      setEmailError(emailErrorStr);\n      return false;\n    }\n\n    return true;\n  };\n\n  const validatePassword = password => {\n    setPasswError(\"\"); //PASSWORD  \n\n    if (password.length == 1 || password.length < 8) {\n      passwErrorStr = \"Password must be longer than that.\";\n    }\n\n    if (passwErrorStr !== \"\") {\n      setPasswError(passwErrorStr);\n      return false;\n    }\n\n    return true;\n  }; //validation on onClick / Create Account button\n\n\n  const handleClick = e => {\n    if (validate()) {\n      //if there's validation\n      setSuccessMessageVisible(true); //do this\n    } else {\n      return;\n    }\n  };\n  /*\n  if the form validates:\n   Requirements:\n  - Success message: Upon selecting the Create Account button, the user should see a success message. \n  - Add another Account button: Upon selecting the Create Account button, the user should see an add another Account button. \n  - Cleared Create Account form: Upon selecting the Create Account button, it will open a cleared Create Account form.\n  \n  Reality:\n  - Success message: Upon selecting the Create Account button, the user should see a success message. --> success message appears on card when all fields are completed correctly\n  - Add another Account button: Upon selecting the Create Account button, the user should see an add another Account button. --> the new button appears on a new \"page\" after creating succesfully creating an account. there's only 1 button on the card / page\n  - Cleared Create Account form: Upon selecting the Create Account button, it will open a cleared Create Account form. --> upon selecting the Create New Account button, we fire the clearForm() function which shows a clear form again\n  */\n  //dunno what this does, GOTTA GET BACK HERE\n  // context.users.push({name, email, password, balance:100});\n  // ez kell\n  // context.users.push({name, email, password});\n  // setShow(false);\n  //form input \n  //can't have same function for all 3 as in the helper code I got (right?)\n\n\n  const handleNameChange = e => {\n    // setName(e.currentTarget.value); //if there's no letter validation\n    let newName = e.currentTarget.value;\n\n    if (!newName || validateName(newName)) {\n      setName(newName);\n    }\n  };\n\n  const handleEmailChange = e => {\n    let newEmail = e.currentTarget.value;\n\n    if (!newEmail || validateEmail(newEmail)) {\n      setEmail(newEmail);\n    }\n  };\n\n  const handlePasswordChange = e => {\n    let newPassword = e.currentTarget.value;\n\n    if (!newPassword || validatePassword(newPassword)) {\n      setPassword(e.currentTarget.value);\n    }\n  };\n\n  const clearForm = () => {\n    setName(\"\");\n    setEmail(\"\");\n    setPassword(\"\");\n    setSuccessMessageVisible(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    bgcolor: \"info\",\n    header: \"Open Account\" // status={status}\n    ,\n    body: !successMessageVisible ?\n    /*#__PURE__*/\n    //if it's not visible, create account\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"create mb-4\",\n        children: \"Open an account that fits your needs!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: nameError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: emailError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: passwError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"name mt-4\",\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"input\",\n        className: \"form-control\",\n        id: \"name\",\n        placeholder: \"Your name is...\",\n        value: name,\n        onChange: handleNameChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 148\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        children: \"Email address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"input\",\n        className: \"form-control\",\n        id: \"email\",\n        placeholder: \"Your email address is...\",\n        value: email,\n        onChange: handleEmailChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 160\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        className: \"form-control\",\n        id: \"password\",\n        placeholder: \"Create a password\",\n        value: password,\n        onChange: handlePasswordChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 165\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !name && !email && !password,\n        className: \"submitBtn btn btn-light\",\n        onClick: e => handleClick(),\n        children: \"Create Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) :\n    /*#__PURE__*/\n    //if it's visible, hide \"previous page\", show success msg and you can create a new account\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"accountMsg mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"h6\", {\n          children: \"Account succesfully created!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submitBtn btn btn-light\",\n        onClick: clearForm,\n        children: \"Add another account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CreateAccount, \"Lf3SniJ/QA53ABS07deV9ypAx6g=\");\n\n_c = CreateAccount;\nexport default CreateAccount;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateAccount\");","map":{"version":3,"sources":["/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/bad_bank_assignment/bad_bank_react/src/CreateAccount.js"],"names":["React","useState","createContext","useContext","Card","CreateAccount","successMessageVisible","setSuccessMessageVisible","name","setName","email","setEmail","password","setPassword","nameError","setNameError","emailError","setEmailError","passwError","setPasswError","MyContext","context","nameErrorStr","emailErrorStr","passwErrorStr","validate","validateName","validateEmail","validatePassword","newName","length","match","emailFormat","isValidFormat","str","handleClick","e","handleNameChange","currentTarget","value","handleEmailChange","newEmail","handlePasswordChange","newPassword","clearForm"],"mappings":"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","sourcesContent":["import React, {useState, createContext, useContext} from \"react\";\nimport Card from \"./Card\";\n\nfunction CreateAccount() {\n    const [successMessageVisible, setSuccessMessageVisible] = useState(false); //instead of \"show\" initialized with true...\n    // const [status, setStatus] = useState(\"\");\n    let [name, setName] = useState(\"\");\n    let [email, setEmail] = useState(\"\");\n    let [password, setPassword] = useState(\"\");\n    let [nameError, setNameError] = useState(\"\");\n    let [emailError, setEmailError] = useState(\"\");\n    let [passwError, setPasswError] = useState(\"\");\n\n\n    const MyContext = createContext(null); //creates a Context object\n    const context = useContext(MyContext);  \n\n    //I'll put error strings here so I don't have to declare it in the validateName() function\n    let nameErrorStr = \"\";\n    let emailErrorStr = \"\";\n    let passwErrorStr = \"\";\n\n    const validate = () => {\n        setEmailError(\"\");\n        if (!email) {\n            emailErrorStr = \"Oops! Your email can't be blank.\"\n            setEmailError(emailErrorStr);\n            return false;\n        }\n\n        setNameError(\"\");\n        if (!name) {\n            nameErrorStr = \"Oops! Your name can't be blank.\"\n            setNameError(nameErrorStr);\n            return false;\n        }\n        \n        setPasswError(\"\")\n        if (!password) {\n            passwErrorStr = \"Oops! Your password can't be blank.\"\n            setPasswError(passwErrorStr);\n            return false;\n        }\n\n        return validateName(name) && validateEmail(email) && validatePassword(password);\n    } //validation ends\n\n    //limiting input to the letters of the English alphabet\n    const validateName = (newName) => {\n        setNameError(\"\");\n\n         //NO INPUT + ADDITIONAL VALIDATION\n        //NAME\n        //additional: name length \n        if (name.length < 3) {\n            nameErrorStr = \"Name must be longer than that.\"\n        } else if(!newName.match(/^[a-z][a-z\\s]*$/)) {\n            nameErrorStr = \"Enter only letters\";\n        }\n\n        if (nameErrorStr !== \"\") {\n            setNameError(nameErrorStr);\n            return false;\n        }\n        return true;\n    }\n    \n    const validateEmail = (email) => {\n        setEmailError(\"\");\n\n        let emailFormat = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,4}$/; \n        //email format function\n        let isValidFormat = str => {\n            return str.match(emailFormat);\n        }\n\n        //EMAIL\n        //additional: email length, email format \n        if (email.length == 1) {\n            emailErrorStr = \"Name must be longer than that.\"\n        } else if (!isValidFormat(email)) {\n            emailErrorStr = \"Oops! Invalid e-mail.\"\n        }\n\n        if (emailErrorStr !== \"\") {\n            setEmailError(emailErrorStr)\n            return false;\n        }\n        return true;\n    }\n\n    const validatePassword = (password) => {\n        setPasswError(\"\");\n\n         //PASSWORD  \n        if (password.length == 1 || password.length < 8) {\n            passwErrorStr = \"Password must be longer than that.\"\n        }\n\n        if (passwErrorStr !== \"\") {\n            setPasswError(passwErrorStr)\n            return false;\n        }\n        return true;\n    }\n\n    //validation on onClick / Create Account button\n    const handleClick = e => {\n            if(validate()) { //if there's validation\n                setSuccessMessageVisible(true); //do this\n        } else {\n            return;\n        }\n    }\n            /*\n            if the form validates:\n\n            Requirements:\n            - Success message: Upon selecting the Create Account button, the user should see a success message. \n            - Add another Account button: Upon selecting the Create Account button, the user should see an add another Account button. \n            - Cleared Create Account form: Upon selecting the Create Account button, it will open a cleared Create Account form.\n            \n            Reality:\n            - Success message: Upon selecting the Create Account button, the user should see a success message. --> success message appears on card when all fields are completed correctly\n            - Add another Account button: Upon selecting the Create Account button, the user should see an add another Account button. --> the new button appears on a new \"page\" after creating succesfully creating an account. there's only 1 button on the card / page\n            - Cleared Create Account form: Upon selecting the Create Account button, it will open a cleared Create Account form. --> upon selecting the Create New Account button, we fire the clearForm() function which shows a clear form again\n            */\n        \n        //dunno what this does, GOTTA GET BACK HERE\n        // context.users.push({name, email, password, balance:100});\n        // ez kell\n        // context.users.push({name, email, password});\n        // setShow(false);\n    \n\n    \n    //form input \n    //can't have same function for all 3 as in the helper code I got (right?)\n    const handleNameChange = e => {\n        // setName(e.currentTarget.value); //if there's no letter validation\n        let newName = e.currentTarget.value;\n        if (!newName || validateName(newName)) {\n            setName(newName);\n        }\n    }\n\n    const handleEmailChange = e => {\n        let newEmail = e.currentTarget.value;\n        if (!newEmail || validateEmail(newEmail)) {\n            setEmail(newEmail);\n        }\n    }\n\n    const handlePasswordChange = e => {\n        let newPassword = e.currentTarget.value;\n        if (!newPassword || validatePassword(newPassword)) {\n            setPassword(e.currentTarget.value);\n        }\n    }\n\n\n    const clearForm = () => {\n        setName(\"\");\n        setEmail(\"\");\n        setPassword(\"\");\n        setSuccessMessageVisible(false);\n    }\n\n    return (\n        <Card\n            bgcolor=\"info\"\n            header=\"Open Account\"\n            // status={status}\n            body={!successMessageVisible ? (  //if it's not visible, create account\n                <>\n                    <h5 className=\"create mb-4\">Open an account that fits your needs!</h5>\n\n                    <div>\n                        <div className=\"error\">{nameError}</div>\n                        <div className=\"error\">{emailError}</div>\n                        <div className=\"error\">{passwError}</div>\n                    </div>\n                    \n                    <h6 className=\"name mt-4\">Name</h6>\n                    <input type=\"input\" className=\"form-control\" id=\"name\" placeholder=\"Your name is...\" value={name} onChange={handleNameChange}/><br/>\n                    \n                    <h6>Email address</h6>\n                    <input type=\"input\" className=\"form-control\" id=\"email\" placeholder=\"Your email address is...\" value={email} onChange={handleEmailChange}/><br/>\n\n                    <h6>Password</h6>\n                    <input type=\"password\" className=\"form-control\" id=\"password\" placeholder=\"Create a password\" value={password} onChange={handlePasswordChange}/><br/>\n                    \n                    {/* SUBMIT BUTTON */}\n                    <button type=\"submit\" disabled={!name && !email && !password} className=\"submitBtn btn btn-light\" onClick={e => handleClick()}>Create Account</button>\n                    </>\n                    ):( //if it's visible, hide \"previous page\", show success msg and you can create a new account\n                    <>\n                    <div className=\"accountMsg mb-4\">\n                        <h6>Account succesfully created!</h6>\n                    </div>\n                    <button type=\"submit\" className=\"submitBtn btn btn-light\" onClick={clearForm}>Add another account</button>\n                </>\n            )}\n        />\n    )\n}\n\nexport default CreateAccount;"]},"metadata":{},"sourceType":"module"}