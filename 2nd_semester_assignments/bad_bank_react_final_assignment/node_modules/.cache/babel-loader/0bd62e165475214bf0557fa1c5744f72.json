{"ast":null,"code":"var _jsxFileName = \"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/bad_bank_assignment/bad_bank_react/src/MyContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyContext = /*#__PURE__*/createContext(); // const ctx = useContext(MyContext);\n// ctx.users.push({name, email, password})\n\nfunction MyContextProvider({\n  children\n}) {\n  _s();\n\n  const context = useContext(MyContext); //from CREATE ACCOUNT COMPONENT\n\n  const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n  let [name, setName] = useState();\n  let [email, setEmail] = useState();\n  let [password, setPassword] = useState();\n  let [nameError, setNameError] = useState(\"\");\n  let [emailError, setEmailError] = useState(\"\");\n  let [passwError, setPasswError] = useState(\"\");\n  let [newUser, setNewUser] = useState({});\n  let [users, setUsers] = useState([]);\n  let nameErrorStr = \"\";\n  let emailErrorStr = \"\";\n  let passwordErrorStr = \"\"; //NO INPUT + ADDITIONAL VALIDATION\n\n  const validate = () => {\n    setEmailError(\"\");\n    setNameError(\"\");\n    setPasswError(\"\");\n\n    if (!email) {\n      emailErrorStr = \"Oops! Your email can't be blank.\"; //additional: email length \n    } else if (email.length == 1) {\n      emailErrorStr = \"Email must be longer than that.\";\n    }\n\n    if (!name) {\n      nameErrorStr = \"Oops! Your name can't be blank.\"; //additional: name length \n    } else if (name.length < 3) {\n      nameErrorStr = \"Name must be longer than that.\";\n    }\n\n    if (!password) {\n      passwordErrorStr = \"Oops! Your password can't be blank.\";\n    }\n\n    if (nameErrorStr == \"\") {\n      validateName(name);\n    }\n\n    if (emailErrorStr == \"\") {\n      validateEmail(email);\n    }\n\n    if (passwordErrorStr == \"\") {\n      validatePassword(password);\n    }\n\n    setNameError(nameErrorStr);\n    setEmailError(emailErrorStr);\n    setPasswError(passwordErrorStr);\n    return nameErrorStr === \"\" && emailErrorStr === \"\" && passwordErrorStr === \"\"; //returns true and validate() is executed\n  };\n\n  const validateName = newName => {\n    //limiting input to the letters of the English alphabet including capital letters\n    // if(!newName.match(/^[a-z][a-z\\s]*$/)) {\n    if (!newName.match(/^[a-zA-Z][a-zA-Z\\s]*$/)) {\n      nameErrorStr = \"Enter only letters\";\n      return false;\n    }\n\n    return true;\n  };\n\n  const validateEmail = newEmail => {\n    let emailFormat = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,4}$/; //email format function\n\n    let isValidFormat = str => {\n      return str.match(emailFormat);\n    };\n\n    if (!isValidFormat(newEmail)) {\n      emailErrorStr = \"Oops! Invalid email.\";\n      return false;\n    }\n\n    return true;\n  };\n\n  const validatePassword = newPassword => {\n    if (newPassword.length == 1 || newPassword.length < 8) {\n      passwordErrorStr = \"Password must be longer than that.\";\n      return false;\n    }\n\n    return true;\n  }; //NEW\n  //to push all data\n  // const handle = data => {\n  //     console.log(\"I called handle\")\n  //     context.users.push({name: data.name, email:data.email, password:data.password, balance:data.balance});\n  //     return true;\n  // }\n  //validation on onClick / Create Account button\n\n\n  const handleClick = e => {\n    // //CALL HANDLE\n    // handle();\n    if (validate()) {\n      //if there's validation\n      setSuccessMessageVisible(true); //do this\n\n      setNewUser({\n        \"name\": name,\n        \"email\": email,\n        \"password\": password\n      });\n\n      let wrapper = users => {\n        console.log(users);\n        console.log(newUser);\n        console.log(users.concat(newUser));\n        return users.concat(newUser);\n      };\n\n      setUsers(wrapper(users));\n      console.log(JSON.stringify(users));\n    } else {\n      return;\n    }\n  }; //form input \n  //can't have same function for all 3 as in the helper code I got (right?)\n\n\n  const handleNameChange = e => {\n    // setName(e.currentTarget.value); //if there's no letter validation\n    let newName = e.currentTarget.value;\n\n    if (!newName || validateName(newName)) {\n      setName(newName);\n    }\n  };\n\n  const handleEmailChange = e => {\n    setEmail(e.currentTarget.value);\n  };\n\n  const handlePasswordChange = e => {\n    setPassword(e.currentTarget.value);\n  };\n\n  const clearForm = () => {\n    setName(\"\");\n    setEmail(\"\");\n    setPassword(\"\");\n    setSuccessMessageVisible(false);\n  }; // setName(newName => [...newName, name]);\n  // setEmail(newEmail => [...newEmail, email]);\n  // setPassword(newPassword => [...newPassword, password]);\n  // ------------------------------------------------------\n  //from DEPOSIT COMPONENT\n\n\n  let [depositAmount, setDepositAmount] = useState(0.0);\n  let [balance, setBalance] = useState(0.0);\n  let [numberError, setNumberError] = useState(\"\"); //input limited to numbers\n  // //error string\n\n  let numberErrorStr = \"\";\n\n  const validateNr = newValue => {\n    //clear error when there's new input\n    setNumberError(\"\");\n    setWithdrawError(\"\");\n\n    if (!newValue.match(/^([(0-9)]+\\.)*([(0-9)]+)*$/)) {\n      //this regex matches numbers from 0 to 9 and + decimal numbers\n      numberErrorStr = \"Enter numbers only\";\n      setNumberError(numberErrorStr);\n      return false; //didn't validate\n    }\n\n    return true; //did validate\n  };\n\n  const handleChange = e => {\n    let newValue = e.target.value;\n\n    if (validateNr(newValue) || !newValue) {\n      //otherwise when we delete the numbers, it won't allow us to delete the last one\n      setDepositAmount(newValue);\n    } else {\n      e.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number...right?\n    }\n\n    setSuccessMessageVisible(false);\n  }; //this also an event hadler; I could have wrapped this in a function that gets an event as argument\n\n\n  const submitDeposit = currentValue => {\n    balance += parseFloat(currentValue);\n    setBalance(balance);\n    setSuccessMessageVisible(true);\n  };\n\n  let showHideSuccessMessage = () => {\n    if (successMessageVisible) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"depositMsg mt-4\",\n        children: /*#__PURE__*/_jsxDEV(\"h6\", {\n          children: \"Your deposit was received!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this);\n    }\n\n    return;\n  }; // ------------------------------------------------------\n  //from WITHDRAW COMPONENT\n\n\n  let [withdrawAmount, setWithdrawAmount] = useState(0.0);\n  let [withdrawError, setWithdrawError] = useState(\"\");\n  const [withdrawSuccessMessageVisible, setWithdrawSuccessMessageVisible] = useState(false);\n  let withdrawErrorStr = \"\";\n\n  const withdrawHandleChange = e => {\n    let newValue = e.target.value;\n\n    if (validateNr(newValue) || !newValue) {\n      //otherwise when we delete the numbers, it won't allow us to delete the last one\n      setWithdrawAmount(newValue);\n    } else {\n      e.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number...right?\n    }\n\n    setWithdrawSuccessMessageVisible(false);\n  };\n\n  const submitWithdrawal = currentValue => {\n    if (currentValue > balance) {\n      withdrawErrorStr = \"Amount higher than the account balance.\";\n      setWithdrawError(withdrawErrorStr);\n      setWithdrawSuccessMessageVisible(false);\n    } else {\n      setBalance(balance - parseFloat(currentValue));\n      setWithdrawError(\"\");\n      setWithdrawSuccessMessageVisible(true);\n    }\n  };\n\n  let showHideSuccessMessageWithdraw = () => {\n    if (withdrawSuccessMessageVisible) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"depositMsg mt-4\",\n        children: /*#__PURE__*/_jsxDEV(\"h6\", {\n          children: \"Your withdrawal was succesful!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }, this);\n    }\n\n    return;\n  };\n\n  const defaultContext = {\n    //state:\n    name,\n    email,\n    password,\n    nameError,\n    emailError,\n    passwError,\n    depositAmount,\n    balance,\n    numberError,\n    successMessageVisible,\n    withdrawSuccessMessageVisible,\n    withdrawAmount,\n    withdrawError,\n    //functions:\n    validate,\n    handleClick,\n    handleNameChange,\n    handleEmailChange,\n    handlePasswordChange,\n    clearForm,\n    validateNr,\n    handleChange,\n    submitDeposit,\n    showHideSuccessMessage,\n    withdrawHandleChange,\n    submitWithdrawal,\n    showHideSuccessMessageWithdraw\n  };\n  return /*#__PURE__*/_jsxDEV(MyContext.Provider, {\n    value: defaultContext,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MyContextProvider, \"M++cFPZPO0WRJrAEzAMDApoIwKc=\");\n\n_c = MyContextProvider;\nexport { MyContext, MyContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"MyContextProvider\");","map":{"version":3,"sources":["/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/bad_bank_assignment/bad_bank_react/src/MyContext.js"],"names":["React","createContext","useContext","useState","MyContext","MyContextProvider","children","context","successMessageVisible","setSuccessMessageVisible","name","setName","email","setEmail","password","setPassword","nameError","setNameError","emailError","setEmailError","passwError","setPasswError","newUser","setNewUser","users","setUsers","nameErrorStr","emailErrorStr","passwordErrorStr","validate","length","validateName","validateEmail","validatePassword","newName","match","newEmail","emailFormat","isValidFormat","str","newPassword","handleClick","e","wrapper","console","log","concat","JSON","stringify","handleNameChange","currentTarget","value","handleEmailChange","handlePasswordChange","clearForm","depositAmount","setDepositAmount","balance","setBalance","numberError","setNumberError","numberErrorStr","validateNr","newValue","setWithdrawError","handleChange","target","slice","submitDeposit","currentValue","parseFloat","showHideSuccessMessage","withdrawAmount","setWithdrawAmount","withdrawError","withdrawSuccessMessageVisible","setWithdrawSuccessMessageVisible","withdrawErrorStr","withdrawHandleChange","submitWithdrawal","showHideSuccessMessageWithdraw","defaultContext"],"mappings":"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","sourcesContent":["import React, {createContext, useContext, useState} from \"react\";\n\nconst MyContext = createContext();\n// const ctx = useContext(MyContext);\n// ctx.users.push({name, email, password})\n\nfunction MyContextProvider({children}) {\n\n    const context = useContext(MyContext);\n\n    //from CREATE ACCOUNT COMPONENT\n    const [successMessageVisible, setSuccessMessageVisible] = useState(false); \n    let [name, setName] = useState();\n    let [email, setEmail] = useState();\n    let [password, setPassword] = useState();\n    let [nameError, setNameError] = useState(\"\");\n    let [emailError, setEmailError] = useState(\"\");\n    let [passwError, setPasswError] = useState(\"\");\n\n    let [newUser, setNewUser] = useState({});\n    let [users, setUsers] = useState([]);\n\n    let nameErrorStr = \"\";\n    let emailErrorStr = \"\";\n    let passwordErrorStr = \"\";\n\n    //NO INPUT + ADDITIONAL VALIDATION\n    const validate = () => {\n        setEmailError(\"\");\n        setNameError(\"\");\n        setPasswError(\"\")\n\n        if (!email) {\n            emailErrorStr = \"Oops! Your email can't be blank.\";\n            //additional: email length \n        } else if (email.length == 1) {\n            emailErrorStr = \"Email must be longer than that.\";\n        }\n        if (!name) {\n            nameErrorStr = \"Oops! Your name can't be blank.\";\n            //additional: name length \n        } else  if (name.length < 3) {\n            nameErrorStr = \"Name must be longer than that.\";\n        } \n        \n        if (!password) {\n            passwordErrorStr = \"Oops! Your password can't be blank.\";\n        }\n\n        if (nameErrorStr == \"\") {\n            validateName(name);\n        }\n\n        if (emailErrorStr == \"\") {\n            validateEmail(email);\n        }\n        \n        if (passwordErrorStr == \"\") {\n            validatePassword(password);\n        }\n\n        setNameError(nameErrorStr);\n        setEmailError(emailErrorStr);\n        setPasswError(passwordErrorStr);\n        return nameErrorStr === \"\" && emailErrorStr === \"\" && passwordErrorStr === \"\"; //returns true and validate() is executed\n    } \n\n    const validateName = newName => {\n        //limiting input to the letters of the English alphabet including capital letters\n        // if(!newName.match(/^[a-z][a-z\\s]*$/)) {\n            if(!newName.match(/^[a-zA-Z][a-zA-Z\\s]*$/)) {\n            nameErrorStr = \"Enter only letters\";\n            return false;\n        }\n        return true;\n    }\n\n    const validateEmail = newEmail => {\n        let emailFormat = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,4}$/; \n        //email format function\n        let isValidFormat = str => {\n            return str.match(emailFormat);\n        }\n\n        if (!isValidFormat(newEmail)) {\n            emailErrorStr = \"Oops! Invalid email.\";\n            return false;\n        }\n        return true;\n    }\n\n    const validatePassword = newPassword => {\n        if (newPassword.length == 1 || newPassword.length < 8) {\n            passwordErrorStr = \"Password must be longer than that.\";\n            return false;\n        }\n        return true;\n    }\n\n    //NEW\n    //to push all data\n    // const handle = data => {\n    //     console.log(\"I called handle\")\n    //     context.users.push({name: data.name, email:data.email, password:data.password, balance:data.balance});\n    //     return true;\n    // }\n\n    //validation on onClick / Create Account button\n    const handleClick = e => {\n        // //CALL HANDLE\n        // handle();\n        if (validate()) { //if there's validation\n            setSuccessMessageVisible(true); //do this\n            setNewUser({\n                \"name\": name,\n                \"email\": email,\n                \"password\" : password\n            });\n\n            let wrapper = users => { \n                console.log(users);\n                console.log(newUser);\n                console.log(users.concat(newUser));\n                return users.concat(newUser);\n            }\n            setUsers(wrapper(users));\n            console.log(JSON.stringify(users));\n\n        } else {\n            return;\n        }\n    }\n\n    //form input \n    //can't have same function for all 3 as in the helper code I got (right?)\n    const handleNameChange = e => {\n        // setName(e.currentTarget.value); //if there's no letter validation\n        let newName = e.currentTarget.value;\n        if (!newName || validateName(newName)) {\n            setName(newName);\n        }\n    }\n\n    const handleEmailChange = e => {\n        setEmail(e.currentTarget.value);\n    }\n\n    const handlePasswordChange = e => {        \n        setPassword(e.currentTarget.value);\n    }\n\n    const clearForm = () => {\n        setName(\"\");\n        setEmail(\"\");\n        setPassword(\"\");\n        setSuccessMessageVisible(false);\n    }\n\n\n    // setName(newName => [...newName, name]);\n    // setEmail(newEmail => [...newEmail, email]);\n    // setPassword(newPassword => [...newPassword, password]);\n\n\n    // ------------------------------------------------------\n\n    //from DEPOSIT COMPONENT\n    let [depositAmount, setDepositAmount] = useState(0.0);\n    let [balance, setBalance] = useState(0.0);\n    let [numberError, setNumberError] = useState(\"\");\n    \n    //input limited to numbers\n    // //error string\n    let numberErrorStr = \"\";\n    const validateNr = newValue => {\n        //clear error when there's new input\n        setNumberError(\"\");\n        setWithdrawError(\"\");\n\n        if(!newValue.match(/^([(0-9)]+\\.)*([(0-9)]+)*$/)) { //this regex matches numbers from 0 to 9 and + decimal numbers\n            numberErrorStr = \"Enter numbers only\";\n            setNumberError(numberErrorStr);\n            return false; //didn't validate\n        }\n        return true; //did validate\n    }\n\n    const handleChange = e => {\n        let newValue = e.target.value;\n        if (validateNr(newValue) || !newValue) { //otherwise when we delete the numbers, it won't allow us to delete the last one\n            setDepositAmount(newValue);\n        } else {\n             e.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number...right?\n        } \n         setSuccessMessageVisible(false);   \n    }\n\n    //this also an event hadler; I could have wrapped this in a function that gets an event as argument\n    const submitDeposit = currentValue => {\n        balance += parseFloat(currentValue);\n        setBalance(balance);\n        setSuccessMessageVisible(true);\n    }\n\n    let showHideSuccessMessage = () => {\n        if (successMessageVisible) {\n            return (\n                <div className=\"depositMsg mt-4\">\n                    <h6>Your deposit was received!</h6>\n                </div>\n            )\n        }\n        return;\n    }\n\n    // ------------------------------------------------------\n\n    //from WITHDRAW COMPONENT\n    let [withdrawAmount, setWithdrawAmount] = useState(0.0);\n    let [withdrawError, setWithdrawError] = useState(\"\");\n    const [withdrawSuccessMessageVisible, setWithdrawSuccessMessageVisible] = useState(false); \n\n    let withdrawErrorStr = \"\";\n\n    \n    const withdrawHandleChange = e => {\n        let newValue = e.target.value;\n        if (validateNr(newValue) || !newValue) { //otherwise when we delete the numbers, it won't allow us to delete the last one\n            setWithdrawAmount(newValue);\n        } else {\n             e.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number...right?\n        } \n        setWithdrawSuccessMessageVisible(false);   \n    }\n\n     const submitWithdrawal = currentValue => {\n        if (currentValue > balance) {\n            withdrawErrorStr = \"Amount higher than the account balance.\";\n            setWithdrawError(withdrawErrorStr);\n            setWithdrawSuccessMessageVisible(false);\n        } else {\n            setBalance(balance - parseFloat(currentValue));\n            setWithdrawError(\"\");\n            setWithdrawSuccessMessageVisible(true);\n        }\n    }\n\n    let showHideSuccessMessageWithdraw = () => {\n        if (withdrawSuccessMessageVisible) {\n            return (\n                <div className=\"depositMsg mt-4\">\n                    <h6>Your withdrawal was succesful!</h6>\n                </div>\n            )\n        }\n        return;\n    }\n\n\n    const defaultContext = {\n        //state:\n        name,\n        email,\n        password,\n        nameError,\n        emailError,\n        passwError,\n        depositAmount,\n        balance,\n        numberError,\n        successMessageVisible,\n        withdrawSuccessMessageVisible,\n        withdrawAmount,\n        withdrawError,\n        //functions:\n        validate,\n        handleClick,\n        handleNameChange,\n        handleEmailChange,\n        handlePasswordChange,\n        clearForm,\n        validateNr,\n        handleChange,\n        submitDeposit,\n        showHideSuccessMessage,\n        withdrawHandleChange,\n        submitWithdrawal,\n        showHideSuccessMessageWithdraw\n    };\n\n    return (\n        <MyContext.Provider value={defaultContext}>\n            {children}\n        </MyContext.Provider>\n    )\n}\n\nexport {MyContext, MyContextProvider};"]},"metadata":{},"sourceType":"module"}