{"ast":null,"code":"var _jsxFileName = \"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/bad_bank_assignment/bad_bank_react/src/MyContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyContext = /*#__PURE__*/createContext();\n\nfunction MyContextProvider({\n  children\n}) {\n  _s();\n\n  //from Create Account\n  const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n  let [name, setName] = useState(\"\");\n  let [email, setEmail] = useState(\"\");\n  let [password, setPassword] = useState(\"\");\n  let [nameError, setNameError] = useState(\"\");\n  let [emailError, setEmailError] = useState(\"\");\n  let [passwError, setPasswError] = useState(\"\");\n  let nameErrorStr = \"\";\n  let emailErrorStr = \"\";\n  let passwordErrorStr = \"\"; //NO INPUT + ADDITIONAL VALIDATION\n\n  const validate = () => {\n    setEmailError(\"\");\n    setNameError(\"\");\n    setPasswError(\"\");\n\n    if (!email) {\n      emailErrorStr = \"Oops! Your email can't be blank.\"; //additional: email length \n    } else if (email.length == 1) {\n      emailErrorStr = \"Email must be longer than that.\";\n    }\n\n    if (!name) {\n      nameErrorStr = \"Oops! Your name can't be blank.\"; //additional: name length \n    } else if (name.length < 3) {\n      nameErrorStr = \"Name must be longer than that.\";\n    }\n\n    if (!password) {\n      passwordErrorStr = \"Oops! Your password can't be blank.\";\n    }\n\n    if (nameErrorStr == \"\") {\n      validateName(name);\n    }\n\n    if (emailErrorStr == \"\") {\n      validateEmail(email);\n    }\n\n    if (passwordErrorStr == \"\") {\n      validatePassword(password);\n    }\n\n    setNameError(nameErrorStr);\n    setEmailError(emailErrorStr);\n    setPasswError(passwordErrorStr);\n    return nameErrorStr === \"\" && emailErrorStr === \"\" && passwordErrorStr === \"\"; //returns true and validate() is executed\n  };\n\n  const validateName = newName => {\n    //limiting input to the letters of the English alphabet\n    if (!newName.match(/^[a-z][a-z\\s]*$/)) {\n      nameErrorStr = \"Enter only letters\";\n      return false;\n    }\n\n    return true;\n  }; //validation on onClick / Create Account button\n\n\n  const handleClick = e => {\n    if (validate()) {\n      //if there's validation\n      console.log(\"validate was called\");\n      setSuccessMessageVisible(true); //do this\n    } else {\n      return;\n    }\n  }; //form input \n  //can't have same function for all 3 as in the helper code I got (right?)\n\n\n  const handleNameChange = e => {\n    // setName(e.currentTarget.value); //if there's no letter validation\n    let newName = e.currentTarget.value;\n\n    if (!newName || validateName(newName)) {\n      setName(newName);\n    }\n  };\n\n  const handleEmailChange = e => {\n    setEmail(e.currentTarget.value);\n  };\n\n  const handlePasswordChange = e => {\n    setPassword(e.currentTarget.value);\n  };\n\n  const clearForm = () => {\n    setName(\"\");\n    setEmail(\"\");\n    setPassword(\"\");\n    setSuccessMessageVisible(false);\n  }; //from Deposit\n\n\n  let [depositAmount, setDepositAmount] = useState(0.0);\n  let [balance, setBalance] = useState(0.0);\n  let [numberError, setNumberError] = useState(\"\"); // let [successMessageVisible, setSuccessMessageVisible] = useState(false);\n  //input limited to numbers\n\n  const validateDep = newValue => {\n    setNumberError(\"\");\n\n    if (!newValue.match(/^([(0-9)]+\\.)*([(0-9)]+)*$/)) {\n      //this regex matches numbers from 0 to 9 and + decimal numbers\n      numberErrorStr = \"Enter numbers only\";\n      setNumberError(numberErrorStr);\n      return false; //didn't validate\n    }\n\n    return true; //did validate\n  };\n\n  const handleChange = e => {\n    let newValue = e.target.value;\n\n    if (validateDep(newValue) || !newValue) {\n      //otherwise when we delete the numbers, it won't allow us to delete the last one\n      setDepositAmount(newValue);\n    } else {\n      e.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number...right?\n    }\n\n    setSuccessMessageVisible(false);\n  }; //this also an event hadler; I could have wrapped this in a function that gets an event as argument\n\n\n  const submitDeposit = currentValue => {\n    balance += parseFloat(currentValue);\n    setBalance(balance);\n    setSuccessMessageVisible(true);\n  };\n\n  let showHideSuccessMessage = () => {\n    if (successMessageVisible) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"depositMsg mt-4\",\n        children: /*#__PURE__*/_jsxDEV(\"h6\", {\n          children: \"Your deposit was received!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this);\n    }\n\n    return;\n  };\n\n  const defaultContext = {\n    //state:\n    name,\n    email,\n    password,\n    nameError,\n    emailError,\n    passwError,\n    depositAmount,\n    balance,\n    numberError,\n    successMessageVisible,\n    //functions:\n    validate,\n    handleClick,\n    handleNameChange,\n    handleEmailChange,\n    handlePasswordChange,\n    clearForm,\n    validateDep,\n    handleChange,\n    submitDeposit,\n    showHideSuccessMessage\n  };\n  return /*#__PURE__*/_jsxDEV(MyContext.Provider, {\n    value: defaultContext,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MyContextProvider, \"1zkCCKLlYwgx3VIKXfrUmqyp6+8=\");\n\n_c = MyContextProvider;\nexport { MyContext, MyContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"MyContextProvider\");","map":{"version":3,"sources":["/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/bad_bank_assignment/bad_bank_react/src/MyContext.js"],"names":["React","createContext","useState","MyContext","MyContextProvider","children","successMessageVisible","setSuccessMessageVisible","name","setName","email","setEmail","password","setPassword","nameError","setNameError","emailError","setEmailError","passwError","setPasswError","nameErrorStr","emailErrorStr","passwordErrorStr","validate","length","validateName","validateEmail","validatePassword","newName","match","handleClick","e","console","log","handleNameChange","currentTarget","value","handleEmailChange","handlePasswordChange","clearForm","depositAmount","setDepositAmount","balance","setBalance","numberError","setNumberError","validateDep","newValue","numberErrorStr","handleChange","target","slice","submitDeposit","currentValue","parseFloat","showHideSuccessMessage","defaultContext"],"mappings":"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","sourcesContent":["import React, {createContext, useState} from \"react\";\n\nconst MyContext = createContext();\n\nfunction MyContextProvider({children}) {\n\n    //from Create Account\n    const [successMessageVisible, setSuccessMessageVisible] = useState(false); \n    let [name, setName] = useState(\"\");\n    let [email, setEmail] = useState(\"\");\n    let [password, setPassword] = useState(\"\");\n    let [nameError, setNameError] = useState(\"\");\n    let [emailError, setEmailError] = useState(\"\");\n    let [passwError, setPasswError] = useState(\"\");\n\n\n\n    let nameErrorStr = \"\";\n    let emailErrorStr = \"\";\n    let passwordErrorStr = \"\";\n\n    //NO INPUT + ADDITIONAL VALIDATION\n    const validate = () => {\n        setEmailError(\"\");\n        setNameError(\"\");\n        setPasswError(\"\")\n\n        if (!email) {\n            emailErrorStr = \"Oops! Your email can't be blank.\";\n            //additional: email length \n        } else if (email.length == 1) {\n            emailErrorStr = \"Email must be longer than that.\";\n        }\n        if (!name) {\n            nameErrorStr = \"Oops! Your name can't be blank.\";\n            //additional: name length \n        } else  if (name.length < 3) {\n            nameErrorStr = \"Name must be longer than that.\";\n        } \n        \n        if (!password) {\n            passwordErrorStr = \"Oops! Your password can't be blank.\";\n        }\n\n        if (nameErrorStr == \"\") {\n            validateName(name);\n        }\n\n        if (emailErrorStr == \"\") {\n            validateEmail(email);\n        }\n        \n        if (passwordErrorStr == \"\") {\n            validatePassword(password);\n        }\n\n        setNameError(nameErrorStr);\n        setEmailError(emailErrorStr);\n        setPasswError(passwordErrorStr);\n        return nameErrorStr === \"\" && emailErrorStr === \"\" && passwordErrorStr === \"\"; //returns true and validate() is executed\n    } \n\n    const validateName = newName => {\n        //limiting input to the letters of the English alphabet\n        if(!newName.match(/^[a-z][a-z\\s]*$/)) {\n            nameErrorStr = \"Enter only letters\";\n            return false;\n        }\n        return true;\n    }\n\n\n    //validation on onClick / Create Account button\n    const handleClick = e => {\n        if (validate()) { //if there's validation\n            console.log(\"validate was called\")\n            setSuccessMessageVisible(true); //do this\n        } else {\n            return;\n        }\n    }\n\n    //form input \n    //can't have same function for all 3 as in the helper code I got (right?)\n    const handleNameChange = e => {\n        // setName(e.currentTarget.value); //if there's no letter validation\n        let newName = e.currentTarget.value;\n        if (!newName || validateName(newName)) {\n            setName(newName);\n        }\n    }\n\n    const handleEmailChange = e => {\n        setEmail(e.currentTarget.value);\n    }\n\n    const handlePasswordChange = e => {        \n        setPassword(e.currentTarget.value);\n    }\n\n    const clearForm = () => {\n        setName(\"\");\n        setEmail(\"\");\n        setPassword(\"\");\n        setSuccessMessageVisible(false);\n    }\n\n    //from Deposit\n    let [depositAmount, setDepositAmount] = useState(0.0);\n    let [balance, setBalance] = useState(0.0);\n    let [numberError, setNumberError] = useState(\"\");\n    // let [successMessageVisible, setSuccessMessageVisible] = useState(false);\n\n    \n    //input limited to numbers\n    const validateDep = newValue => {\n        setNumberError(\"\");\n        if(!newValue.match(/^([(0-9)]+\\.)*([(0-9)]+)*$/)) { //this regex matches numbers from 0 to 9 and + decimal numbers\n        numberErrorStr = \"Enter numbers only\";\n        setNumberError(numberErrorStr);\n        return false; //didn't validate\n        }\n    return true; //did validate\n    }\n\n    const handleChange = e => {\n        let newValue = e.target.value;\n        if (validateDep(newValue) || !newValue) { //otherwise when we delete the numbers, it won't allow us to delete the last one\n            setDepositAmount(newValue);\n        } else {\n             e.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number...right?\n        } \n         setSuccessMessageVisible(false);   \n    }\n\n    //this also an event hadler; I could have wrapped this in a function that gets an event as argument\n    const submitDeposit = currentValue => {\n        balance += parseFloat(currentValue);\n        setBalance(balance);\n        setSuccessMessageVisible(true);\n    }\n\n    let showHideSuccessMessage = () => {\n        if (successMessageVisible) {\n            return (\n                <div className=\"depositMsg mt-4\">\n                    <h6>Your deposit was received!</h6>\n                </div>\n            )\n        }\n        return;\n    }\n\n    const defaultContext = {\n        //state:\n        name,\n        email,\n        password,\n        nameError,\n        emailError,\n        passwError,\n        depositAmount,\n        balance,\n        numberError,\n        successMessageVisible,\n        //functions:\n        validate,\n        handleClick,\n        handleNameChange,\n        handleEmailChange,\n        handlePasswordChange,\n        clearForm,\n        validateDep,\n        handleChange,\n        submitDeposit,\n        showHideSuccessMessage\n    };\n\n    return (\n        <MyContext.Provider value={defaultContext}>\n            {children}\n        </MyContext.Provider>\n    )\n}\n\nexport {MyContext, MyContextProvider};"]},"metadata":{},"sourceType":"module"}