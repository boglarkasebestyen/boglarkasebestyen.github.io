{"ast":null,"code":"var _jsxFileName = \"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/to_github_backup/boglarkasebestyen.github.io/2nd_semester_assignments/bad_bank_react_assignment/src/MyContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyContext = /*#__PURE__*/createContext();\n\nfunction MyContextProvider({\n  children\n}) {\n  _s();\n\n  //from CREATE ACCOUNT COMPONENT\n  const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [nameError, setNameError] = useState(\"\");\n  const [emailError, setEmailError] = useState(\"\");\n  const [passwError, setPasswError] = useState(\"\");\n  const [users, setUsers] = useState([]);\n  let nameErrorStr = \"\";\n  let emailErrorStr = \"\";\n  let passwordErrorStr = \"\"; //NO INPUT + ADDITIONAL VALIDATION\n\n  const validate = () => {\n    setEmailError(\"\");\n    setNameError(\"\");\n    setPasswError(\"\");\n\n    if (!email) {\n      emailErrorStr = \"Oops! Your email can't be blank.\"; //additional: email length \n    } else if (email.length == 1) {\n      emailErrorStr = \"Email must be longer than that.\";\n    }\n\n    if (!name) {\n      nameErrorStr = \"Oops! Your name can't be blank.\"; //additional: name length \n    } else if (name.length < 3) {\n      nameErrorStr = \"Name must be longer than that.\";\n    }\n\n    if (!password) {\n      passwordErrorStr = \"Oops! Your password can't be blank.\";\n    } //validate if there's no error message \n\n\n    if (nameErrorStr == \"\") {\n      validateName(name);\n    }\n\n    if (emailErrorStr == \"\") {\n      validateEmail(email);\n    }\n\n    if (passwordErrorStr == \"\") {\n      validatePassword(password);\n    }\n\n    setNameError(nameErrorStr);\n    setEmailError(emailErrorStr);\n    setPasswError(passwordErrorStr);\n    return nameErrorStr === \"\" && emailErrorStr === \"\" && passwordErrorStr === \"\"; //returns true and validate() is executed\n  };\n\n  const validateName = newName => {\n    //additonal: limiting input to the letters of the English alphabet, including capital letters\n    if (!newName.match(/^[a-zA-Z][a-zA-Z\\s]*$/)) {\n      nameErrorStr = \"Enter only letters\";\n      return false;\n    }\n\n    return true;\n  }; //additional: email formatting\n\n\n  const validateEmail = newEmail => {\n    let emailFormat = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,4}$/;\n\n    let isValidFormat = str => {\n      return str.match(emailFormat);\n    };\n\n    if (!isValidFormat(newEmail)) {\n      emailErrorStr = \"Oops! Invalid email.\";\n      return false;\n    }\n\n    return true;\n  };\n\n  const validatePassword = newPassword => {\n    if (newPassword.length == 1 || newPassword.length < 8) {\n      passwordErrorStr = \"Password must be longer than that.\";\n      return false;\n    }\n\n    return true;\n  }; //validation on onClick / Create Account button\n\n\n  const handleClick = e => {\n    if (validate()) {\n      setSuccessMessageVisible(true); //adding all new users, for \"All Data\"\n\n      let newUser = {\n        \"name\": name,\n        \"email\": email,\n        \"password\": password\n      };\n      setUsers(users => users.concat(newUser));\n    } else {\n      return;\n    }\n  }; //FORM INPUT  \n\n\n  const handleNameChange = e => {\n    // setName(e.currentTarget.value); //if there's no letter validation\n    let newName = e.currentTarget.value;\n\n    if (!newName || validateName(newName)) {\n      setName(newName);\n    }\n  };\n\n  const handleEmailChange = e => {\n    setEmail(e.currentTarget.value);\n  };\n\n  const handlePasswordChange = e => {\n    setPassword(e.currentTarget.value);\n  }; //firing when creating new account\n\n\n  const clearForm = () => {\n    setName(\"\");\n    setEmail(\"\");\n    setPassword(\"\");\n    setSuccessMessageVisible(false);\n  }; // ------------------------------------------------------\n  //from DEPOSIT COMPONENT\n\n\n  let [depositAmount, setDepositAmount] = useState(0.0);\n  let [balance, setBalance] = useState(0.0);\n  let [depositError, setDepositError] = useState(\"\");\n  let [depositArr, setDepositArr] = useState([]);\n  let depositErrorStr = \"\"; //validating numbers for deposit and withdraw\n\n  const validateNr = newValue => {\n    //clear error when there's new input\n    setDepositError(\"\");\n    setWithdrawError(\"\");\n\n    if (!newValue.match(/^([(0-9)]+\\.)*([(0-9)]+)*$/)) {\n      //this regex matches numbers from 0 to 9 and + decimal numbers\n      depositErrorStr = \"Enter numbers only.\";\n      setDepositError(depositErrorStr);\n      return false; //didn't validate\n    }\n\n    return true; //did validate\n  }; //input\n\n\n  const handleChange = e => {\n    let newValue = e.target.value;\n\n    if (validateNr(newValue) || !newValue) {\n      setDepositAmount(newValue);\n    } else {\n      e.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n    }\n\n    setSuccessMessageVisible(false);\n  }; //submit + additional validation \n\n\n  const submitDeposit = currentValue => {\n    if (currentValue == 0.0) {\n      depositErrorStr = \"Amount must be higher than 0.\";\n      setDepositError(depositErrorStr);\n      setWithdrawSuccessMessageVisible(false);\n      return;\n    }\n\n    if (currentValue.length >= 7) {\n      depositErrorStr = \"Amount must be lower than that.\";\n      setDepositError(depositErrorStr);\n      setWithdrawSuccessMessageVisible(false);\n      return;\n    } //total amount / balance\n\n\n    balance += parseFloat(currentValue);\n    setBalance(balance);\n    setSuccessMessageVisible(true);\n    setDepositAmount(0.0); //all new deposits for \"All Data\"\n\n    let newDeposit = {\n      \"depositAmount\": depositAmount\n    };\n    setDepositArr(depositArr => depositArr.concat(newDeposit));\n  };\n\n  let showHideSuccessMessage = () => {\n    if (successMessageVisible) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message mt-4\",\n        children: /*#__PURE__*/_jsxDEV(\"h6\", {\n          children: \"Your deposit was received!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 8\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 6\n      }, this);\n    }\n\n    return;\n  }; // ------------------------------------------------------\n  //from WITHDRAW COMPONENT\n\n\n  let [withdrawAmount, setWithdrawAmount] = useState(0.0);\n  let [withdrawError, setWithdrawError] = useState(\"\");\n  const [withdrawSuccessMessageVisible, setWithdrawSuccessMessageVisible] = useState(false);\n  let [withdrawArr, setWithdrawArr] = useState([]);\n  let withdrawErrorStr = \"\"; //input\n\n  const withdrawHandleChange = e => {\n    let newValue = e.target.value;\n\n    if (validateNr(newValue) || !newValue) {\n      withdrawErrorStr = \"Enter numbers only.\";\n      setWithdrawAmount(newValue);\n    } else {\n      e.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n    }\n\n    setWithdrawSuccessMessageVisible(false);\n  }; //submit + additional validation\n\n\n  const submitWithdrawal = currentValue => {\n    if (currentValue == 0.0) {\n      withdrawErrorStr = \"Amount must be higher than 0.\";\n      setWithdrawError(withdrawErrorStr);\n      setWithdrawSuccessMessageVisible(false);\n      return;\n    }\n\n    if (currentValue.length >= 7) {\n      withdrawErrorStr = \"Amount must be lower than that.\";\n      setWithdrawError(withdrawErrorStr);\n      setWithdrawSuccessMessageVisible(false);\n      return;\n    }\n\n    if (currentValue > balance) {\n      withdrawErrorStr = \"Amount higher than the account balance.\";\n      setWithdrawError(withdrawErrorStr);\n      setWithdrawSuccessMessageVisible(false);\n    } else {\n      setBalance(balance - parseFloat(currentValue));\n      setWithdrawError(\"\");\n      setWithdrawSuccessMessageVisible(true);\n      setWithdrawAmount(0.0); //all withdrawals, for \"All Data\"\n\n      let newWithdraw = {\n        \"withdrawAmount\": withdrawAmount\n      };\n      setWithdrawArr(withdrawArr => withdrawArr.concat(newWithdraw));\n    }\n  };\n\n  let showHideSuccessMessageWithdraw = () => {\n    if (withdrawSuccessMessageVisible) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message mt-4\",\n        children: /*#__PURE__*/_jsxDEV(\"h6\", {\n          children: \"Your withdrawal was succesful!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 8\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 7\n      }, this);\n    }\n\n    return;\n  };\n\n  const defaultContext = {\n    //state:\n    name,\n    email,\n    password,\n    nameError,\n    emailError,\n    passwError,\n    depositAmount,\n    balance,\n    depositError,\n    successMessageVisible,\n    withdrawSuccessMessageVisible,\n    withdrawAmount,\n    withdrawError,\n    users,\n    depositArr,\n    withdrawArr,\n    //functions:\n    validate,\n    handleClick,\n    handleNameChange,\n    handleEmailChange,\n    handlePasswordChange,\n    clearForm,\n    validateNr,\n    handleChange,\n    submitDeposit,\n    showHideSuccessMessage,\n    withdrawHandleChange,\n    submitWithdrawal,\n    showHideSuccessMessageWithdraw\n  };\n  return /*#__PURE__*/_jsxDEV(MyContext.Provider, {\n    value: defaultContext,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 318,\n    columnNumber: 7\n  }, this);\n}\n\n_s(MyContextProvider, \"lODViG0scwRtmm3zLOoQyybazZA=\");\n\n_c = MyContextProvider;\nexport { MyContext, MyContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"MyContextProvider\");","map":{"version":3,"sources":["/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/to_github_backup/boglarkasebestyen.github.io/2nd_semester_assignments/bad_bank_react_assignment/src/MyContext.js"],"names":["React","createContext","useState","MyContext","MyContextProvider","children","successMessageVisible","setSuccessMessageVisible","name","setName","email","setEmail","password","setPassword","nameError","setNameError","emailError","setEmailError","passwError","setPasswError","users","setUsers","nameErrorStr","emailErrorStr","passwordErrorStr","validate","length","validateName","validateEmail","validatePassword","newName","match","newEmail","emailFormat","isValidFormat","str","newPassword","handleClick","e","newUser","concat","handleNameChange","currentTarget","value","handleEmailChange","handlePasswordChange","clearForm","depositAmount","setDepositAmount","balance","setBalance","depositError","setDepositError","depositArr","setDepositArr","depositErrorStr","validateNr","newValue","setWithdrawError","handleChange","target","slice","submitDeposit","currentValue","setWithdrawSuccessMessageVisible","parseFloat","newDeposit","showHideSuccessMessage","withdrawAmount","setWithdrawAmount","withdrawError","withdrawSuccessMessageVisible","withdrawArr","setWithdrawArr","withdrawErrorStr","withdrawHandleChange","submitWithdrawal","newWithdraw","showHideSuccessMessageWithdraw","defaultContext"],"mappings":"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","sourcesContent":["import React, {createContext, useState} from \"react\";\n\nconst MyContext = createContext();\n\nfunction MyContextProvider({children}) {\n\n    //from CREATE ACCOUNT COMPONENT\n    const [successMessageVisible, setSuccessMessageVisible] = useState(false); \n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [nameError, setNameError] = useState(\"\");\n    const [emailError, setEmailError] = useState(\"\");\n    const [passwError, setPasswError] = useState(\"\");\n    const [users, setUsers] = useState([]);\n\n    let nameErrorStr = \"\";\n    let emailErrorStr = \"\";\n    let passwordErrorStr = \"\";\n\n\n    //NO INPUT + ADDITIONAL VALIDATION\n    const validate = () => {\n\t\t\tsetEmailError(\"\");\n\t\t\tsetNameError(\"\");\n\t\t\tsetPasswError(\"\")\n\n\t\t\tif (!email) {\n\t\t\t\t\temailErrorStr = \"Oops! Your email can't be blank.\";\n\t\t\t\t\t//additional: email length \n\t\t\t} else if (email.length == 1) {\n\t\t\t\t\temailErrorStr = \"Email must be longer than that.\";\n\t\t\t}\n\n\t\t\tif (!name) {\n\t\t\t\t\tnameErrorStr = \"Oops! Your name can't be blank.\";\n\t\t\t\t\t//additional: name length \n\t\t\t} else  if (name.length < 3) {\n\t\t\t\t\tnameErrorStr = \"Name must be longer than that.\";\n\t\t\t} \n\t\t\t\n\t\t\tif (!password) {\n\t\t\t\t\tpasswordErrorStr = \"Oops! Your password can't be blank.\";\n\t\t\t}\n\n\t\t\t//validate if there's no error message \n\t\t\tif (nameErrorStr == \"\") {\n\t\t\t\t\tvalidateName(name);\n\t\t\t}\n\n\t\t\tif (emailErrorStr == \"\") {\n\t\t\t\t\tvalidateEmail(email);\n\t\t\t}\n\t\t\t\n\t\t\tif (passwordErrorStr == \"\") {\n\t\t\t\t\tvalidatePassword(password);\n\t\t\t}\n\n\t\t\tsetNameError(nameErrorStr);\n\t\t\tsetEmailError(emailErrorStr);\n\t\t\tsetPasswError(passwordErrorStr);\n\t\t\treturn nameErrorStr === \"\" && emailErrorStr === \"\" && passwordErrorStr === \"\"; //returns true and validate() is executed\n    }; \n\n    const validateName = newName => {\n\t\t\t//additonal: limiting input to the letters of the English alphabet, including capital letters\n\t\t\t\t\tif(!newName.match(/^[a-zA-Z][a-zA-Z\\s]*$/)) {\n\t\t\t\t\tnameErrorStr = \"Enter only letters\";\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n    };\n\n    //additional: email formatting\n    const validateEmail = newEmail => {\n\t\t\tlet emailFormat = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,4}$/; \n\t\t\tlet isValidFormat = str => {\n\t\t\t\t\treturn str.match(emailFormat);\n\t\t\t}\n\n\t\t\tif (!isValidFormat(newEmail)) {\n\t\t\t\t\temailErrorStr = \"Oops! Invalid email.\";\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n    };\n\n    const validatePassword = newPassword => {\n\t\t\tif (newPassword.length == 1 || newPassword.length < 8) {\n\t\t\t\t\tpasswordErrorStr = \"Password must be longer than that.\";\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n    };\n\n    //validation on onClick / Create Account button\n    const handleClick = e => {\n\t\t\tif (validate()) { \n\t\t\t\t\tsetSuccessMessageVisible(true); \n\t\t\t\t\t//adding all new users, for \"All Data\"\n\t\t\t\t\tlet newUser = {\n\t\t\t\t\t\t\t\"name\": name,\n\t\t\t\t\t\t\t\"email\": email,\n\t\t\t\t\t\t\t\"password\": password\n\t\t\t\t\t};\n\t\t\t\t\tsetUsers(users => users.concat(newUser));\n\t\t\t} else {\n\t\t\treturn;\n\t\t\t}\n    };\n\n    //FORM INPUT  \n    const handleNameChange = e => {\n\t\t\t// setName(e.currentTarget.value); //if there's no letter validation\n\t\t\tlet newName = e.currentTarget.value;\n\t\t\tif (!newName || validateName(newName)) {\n\t\t\t\t\tsetName(newName);\n\t\t\t}\n    };\n\n    const handleEmailChange = e => {\n      setEmail(e.currentTarget.value);\n    };\n\n    const handlePasswordChange = e => {        \n      setPassword(e.currentTarget.value);\n    };\n\n    //firing when creating new account\n    const clearForm = () => {\n\t\t\tsetName(\"\");\n\t\t\tsetEmail(\"\");\n\t\t\tsetPassword(\"\");\n\t\t\tsetSuccessMessageVisible(false);\n    };\n\n\n    // ------------------------------------------------------\n\n    //from DEPOSIT COMPONENT\n    let [depositAmount, setDepositAmount] = useState(0.0);\n    let [balance, setBalance] = useState(0.0);\n    let [depositError, setDepositError] = useState(\"\");\n    let [depositArr, setDepositArr] = useState([]);\n    \n    let depositErrorStr = \"\";\n\n    //validating numbers for deposit and withdraw\n    const validateNr = newValue => {\n\t\t\t//clear error when there's new input\n\t\t\tsetDepositError(\"\");\n\t\t\tsetWithdrawError(\"\");\n\n\t\t\tif(!newValue.match(/^([(0-9)]+\\.)*([(0-9)]+)*$/)) { //this regex matches numbers from 0 to 9 and + decimal numbers\n\t\t\t\t\tdepositErrorStr = \"Enter numbers only.\";\n\t\t\t\t\tsetDepositError(depositErrorStr);\n\t\t\t\t\treturn false; //didn't validate\n\t\t\t} \n\t\t\treturn true; //did validate\n    };\n\n    //input\n    const handleChange = e => {\n\t\t\tlet newValue = e.target.value;\n\t\t\tif (validateNr(newValue) || !newValue) { \n\t\t\t\t\tsetDepositAmount(newValue);\n\t\t\t} else {\n\t\t\t\t\t\te.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n\t\t\t}     \n\t\t\t\tsetSuccessMessageVisible(false);   \n    };\n\n    //submit + additional validation \n    const submitDeposit = currentValue => {\n\t\t\tif (currentValue == 0.0) {\n\t\t\t\t\tdepositErrorStr = \"Amount must be higher than 0.\";\n\t\t\t\t\tsetDepositError(depositErrorStr);\n\t\t\t\t\tsetWithdrawSuccessMessageVisible(false);\n\t\t\t\t\treturn;\n        }\n\n\t\t\tif (currentValue.length >= 7) {\n\t\t\t\tdepositErrorStr = \"Amount must be lower than that.\";\n\t\t\t\tsetDepositError(depositErrorStr);\n\t\t\t\tsetWithdrawSuccessMessageVisible(false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//total amount / balance\n\t\t\tbalance += parseFloat(currentValue);\n\t\t\tsetBalance(balance);\n\t\t\tsetSuccessMessageVisible(true);\n\t\t\tsetDepositAmount(0.0)\n\n\t\t\t//all new deposits for \"All Data\"\n\t\t\tlet newDeposit = {\n\t\t\t\t\"depositAmount\": depositAmount\n\t\t\t};\n\n\t\t\tsetDepositArr(depositArr => depositArr.concat(newDeposit));\n    };\n\n    let showHideSuccessMessage = () => {\n\t\t\tif (successMessageVisible) {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"message mt-4\">\n\t\t\t\t\t\t\t<h6>Your deposit was received!</h6>\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t}\n\t\t\treturn;\n    };\n\n    // ------------------------------------------------------\n\n    //from WITHDRAW COMPONENT\n    let [withdrawAmount, setWithdrawAmount] = useState(0.0);\n    let [withdrawError, setWithdrawError] = useState(\"\");\n    const [withdrawSuccessMessageVisible, setWithdrawSuccessMessageVisible] = useState(false); \n    let [withdrawArr, setWithdrawArr] = useState([]);\n\n    let withdrawErrorStr = \"\";\n\n    //input\n    const withdrawHandleChange = e => {\n\t\t\tlet newValue = e.target.value;\n\t\t\tif (validateNr(newValue) || !newValue) { \n\t\t\t\twithdrawErrorStr = \"Enter numbers only.\" \n\t\t\t\tsetWithdrawAmount(newValue);\n\t\t\t} else {\n\t\t\t\te.target.value = newValue.slice(0, -1); //when we delete the numbers, it cuts off the last element if that's not a number\n\t\t\t} \n\t\t\tsetWithdrawSuccessMessageVisible(false);   \n    };\n\n    //submit + additional validation\n     const submitWithdrawal = currentValue => {\n\t\t\tif (currentValue == 0.0) {\n\t\t\t\twithdrawErrorStr = \"Amount must be higher than 0.\";\n\t\t\t\tsetWithdrawError(withdrawErrorStr);\n\t\t\t\tsetWithdrawSuccessMessageVisible(false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (currentValue.length >= 7) {\n\t\t\t\twithdrawErrorStr = \"Amount must be lower than that.\";\n\t\t\t\tsetWithdrawError(withdrawErrorStr);\n\t\t\t\tsetWithdrawSuccessMessageVisible(false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (currentValue > balance) {\n\t\t\t\twithdrawErrorStr = \"Amount higher than the account balance.\";\n\t\t\t\tsetWithdrawError(withdrawErrorStr);\n\t\t\t\tsetWithdrawSuccessMessageVisible(false);\n\t\t\t} else {\n\t\t\t\tsetBalance(balance - parseFloat(currentValue));\n\t\t\t\tsetWithdrawError(\"\");\n\t\t\t\tsetWithdrawSuccessMessageVisible(true);\n\t\t\t\tsetWithdrawAmount(0.0)\n\t\t\t\t\n\t\t\t\t//all withdrawals, for \"All Data\"\n\t\t\t\tlet newWithdraw = {\n\t\t\t\t\t\"withdrawAmount\": withdrawAmount\n\t\t\t\t};\n\n\t\t\t\tsetWithdrawArr(withdrawArr => withdrawArr.concat(newWithdraw));\n\t\t\t}\n  \t};\n\n    let showHideSuccessMessageWithdraw = () => {\n\t\t\tif (withdrawSuccessMessageVisible) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"message mt-4\">\n\t\t\t\t\t\t\t<h6>Your withdrawal was succesful!</h6>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t}\n\t\t\treturn;\n    };\n\n\n    const defaultContext = {\n\t\t\t//state:\n\t\t\tname,\n\t\t\temail,\n\t\t\tpassword,\n\t\t\tnameError,\n\t\t\temailError,\n\t\t\tpasswError,\n\t\t\tdepositAmount,\n\t\t\tbalance,\n\t\t\tdepositError,\n\t\t\tsuccessMessageVisible,\n\t\t\twithdrawSuccessMessageVisible,\n\t\t\twithdrawAmount,\n\t\t\twithdrawError,\n\t\t\tusers,\n\t\t\tdepositArr,\n\t\t\twithdrawArr,\n\t\t\t//functions:\n\t\t\tvalidate,\n\t\t\thandleClick,\n\t\t\thandleNameChange,\n\t\t\thandleEmailChange,\n\t\t\thandlePasswordChange,\n\t\t\tclearForm,\n\t\t\tvalidateNr,\n\t\t\thandleChange,\n\t\t\tsubmitDeposit,\n\t\t\tshowHideSuccessMessage,\n\t\t\twithdrawHandleChange,\n\t\t\tsubmitWithdrawal,\n\t\t\tshowHideSuccessMessageWithdraw\n    };\n\n    return (\n      <MyContext.Provider value={defaultContext}>\n        {children}\n      </MyContext.Provider>\n    )\n}\n\nexport {MyContext, MyContextProvider};\n"]},"metadata":{},"sourceType":"module"}