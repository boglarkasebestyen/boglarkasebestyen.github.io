{"ast":null,"code":"var _jsxFileName = \"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/week19/shopping_cart_react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Products from \"./Products\"; // simulate getting products from DataBase\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst products = [{\n  name: \"Apples_:\",\n  country: \"Italy\",\n  cost: 3,\n  instock: 10\n}, {\n  name: \"Oranges:\",\n  country: \"Spain\",\n  cost: 4,\n  instock: 3\n}, {\n  name: \"Beans__:\",\n  country: \"USA\",\n  cost: 2,\n  instock: 5\n}, {\n  name: \"Cabbage:\",\n  country: \"USA\",\n  cost: 1,\n  instock: 8\n}]; //=========Cart=============\n\nconst Cart = props => {\n  const {\n    Card,\n    Accordion,\n    Button\n  } = ReactBootstrap;\n  let data = props.location.data ? props.location.data : products;\n  console.log(`data:${JSON.stringify(data)}`);\n  return /*#__PURE__*/_jsxDEV(Accordion, {\n    defaultActiveKey: \"0\",\n    children: list\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 10\n  }, this);\n};\n\n_c = Cart;\n\nconst useDataApi = (initialUrl, initialData) => {\n  _s();\n\n  const {\n    useState,\n    useEffect,\n    useReducer\n  } = React;\n  const [url, setUrl] = useState(initialUrl);\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    data: initialData\n  });\n  console.log(`useDataApi called`);\n  useEffect(() => {\n    console.log(\"useEffect Called\");\n    let didCancel = false;\n\n    const fetchData = async () => {\n      dispatch({\n        type: \"FETCH_INIT\"\n      });\n\n      try {\n        const result = await axios(url);\n        console.log(\"FETCH FROM URl\");\n\n        if (!didCancel) {\n          dispatch({\n            type: \"FETCH_SUCCESS\",\n            payload: result.data\n          });\n        }\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({\n            type: \"FETCH_FAILURE\"\n          });\n        }\n      }\n    };\n\n    fetchData();\n    return () => {\n      didCancel = true;\n    };\n  }, [url]);\n  return [state, setUrl];\n};\n\n_s(useDataApi, \"Xn0sImmEux0JkylNrmImi243RjU=\");\n\nconst dataFetchReducer = (state, action) => {\n  switch (action.type) {\n    case \"FETCH_INIT\":\n      return { ...state,\n        isLoading: true,\n        isError: false\n      };\n\n    case \"FETCH_SUCCESS\":\n      return { ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload\n      };\n\n    case \"FETCH_FAILURE\":\n      return { ...state,\n        isLoading: false,\n        isError: true\n      };\n\n    default:\n      throw new Error();\n  }\n};\n\nexport default App; // const Products = (props) => {\n//   const [items, setItems] = React.useState(products);\n//   const [cart, setCart] = React.useState([]);\n//   const [total, setTotal] = React.useState(0);\n//   const {\n//     Card,\n//     Accordion,\n//     Button,\n//     Container,\n//     Row,\n//     Col,\n//     Image,\n//     Input,\n//   } = ReactBootstrap;\n//   //  Fetch Data\n//   const { Fragment, useState, useEffect, useReducer } = React;\n//   const [query, setQuery] = useState(\"http://localhost:1337/products\");\n//   const [{ data, isLoading, isError }, doFetch] = useDataApi(\n//     \"http://localhost:1337/products\",\n//     {\n//       data: [],\n//     }\n//   );\n//   console.log(`Rendering Products ${JSON.stringify(data)}`);\n//   // Fetch Data\n//   const addToCart = (e) => {\n//     let name = e.target.name;\n//     let item = items.filter((item) => item.name == name);\n//     console.log(`add to Cart ${JSON.stringify(item)}`);\n//     setCart([...cart, ...item]);\n//     //doFetch(query);\n//   };\n//   const deleteCartItem = (index) => {\n//     let newCart = cart.filter((item, i) => index != i);\n//     setCart(newCart);\n//   };\n//   const photos = [\"apple.png\", \"orange.png\", \"beans.png\", \"cabbage.png\"];\n//   let list = items.map((item, index) => {\n//     //let n = index + 1049;\n//     //let url = \"https://picsum.photos/id/\" + n + \"/50/50\";\n//     return (\n//       <li key={index}>\n//         <Image src={photos[index % 4]} width={70} roundedCircle></Image>\n//         <Button variant=\"primary\" size=\"large\">\n//           {item.name}:{item.cost}\n//         </Button>\n//         <input name={item.name} type=\"submit\" onClick={addToCart}></input>\n//       </li>\n//     );\n//   });\n//   let cartList = cart.map((item, index) => {\n//     return (\n//       <Card key={index}>\n//         <Card.Header>\n//           <Accordion.Toggle as={Button} variant=\"link\" eventKey={1 + index}>\n//             {item.name}\n//           </Accordion.Toggle>\n//         </Card.Header>\n//         <Accordion.Collapse\n//           onClick={() => deleteCartItem(index)}\n//           eventKey={1 + index}\n//         >\n//           <Card.Body>\n//             $ {item.cost} from {item.country}\n//           </Card.Body>\n//         </Accordion.Collapse>\n//       </Card>\n//     );\n//   });\n//   let finalList = () => {\n//     let total = checkOut();\n//     let final = cart.map((item, index) => {\n//       return (\n//         <div key={index} index={index}>\n//           {item.name}\n//         </div>\n//       );\n//     });\n//     return { final, total };\n//   };\n//   const checkOut = () => {\n//     let costs = cart.map((item) => item.cost);\n//     const reducer = (accum, current) => accum + current;\n//     let newTotal = costs.reduce(reducer, 0);\n//     console.log(`total updated to ${newTotal}`);\n//     return newTotal;\n//   };\n//   // TODO: implement the restockProducts function\n//   const restockProducts = (url) => {};\n//   return (\n//     <Container>\n//       <Row>\n//         <Col>\n//           <h1>Product List</h1>\n//           <ul style={{ listStyleType: \"none\" }}>{list}</ul>\n//         </Col>\n//         <Col>\n//           <h1>Cart Contents</h1>\n//           <Accordion>{cartList}</Accordion>\n//         </Col>\n//         <Col>\n//           <h1>CheckOut </h1>\n//           <Button onClick={checkOut}>CheckOut $ {finalList().total}</Button>\n//           <div> {finalList().total > 0 && finalList().final} </div>\n//         </Col>\n//       </Row>\n//       <Row>\n//         <form\n//           onSubmit={(event) => {\n//             restockProducts(`http://localhost:1337/${query}`);\n//             console.log(`Restock called on ${query}`);\n//             event.preventDefault();\n//           }}\n//         >\n//           <input\n//             type=\"text\"\n//             value={query}\n//             onChange={(event) => setQuery(event.target.value)}\n//           />\n//           <button type=\"submit\">ReStock Products</button>\n//         </form>\n//       </Row>\n//     </Container>\n//   );\n// };\n// ========================================\n// ReactDOM.render(<Products />, document.getElementById(\"root\"));\n\nvar _c;\n\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"sources":["/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/week19/shopping_cart_react/src/App.js"],"names":["React","ReactDOM","Products","products","name","country","cost","instock","Cart","props","Card","Accordion","Button","ReactBootstrap","data","location","console","log","JSON","stringify","list","useDataApi","initialUrl","initialData","useState","useEffect","useReducer","url","setUrl","state","dispatch","dataFetchReducer","isLoading","isError","didCancel","fetchData","type","result","axios","payload","error","action","Error","App"],"mappings":"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A,OAAO,EAAE,KAHJ;AAILnB,QAAAA,IAAI,EAAE2B,MAAM,CAACF;AAJR,OAAP;;AAMF,SAAK,eAAL;AACE,aAAO,EACL,GAAGV,KADE;AAELG,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF;AACE,YAAM,IAAIS,KAAJ,EAAN;AArBJ;AAuBD,CAxBD;;AA0BA,eAAeC,GAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Products from \"./Products\"\r\n\r\n// simulate getting products from DataBase\r\nconst products = [\r\n  { name: \"Apples_:\", country: \"Italy\", cost: 3, instock: 10 },\r\n  { name: \"Oranges:\", country: \"Spain\", cost: 4, instock: 3 },\r\n  { name: \"Beans__:\", country: \"USA\", cost: 2, instock: 5 },\r\n  { name: \"Cabbage:\", country: \"USA\", cost: 1, instock: 8 },\r\n];\r\n\r\n//=========Cart=============\r\nconst Cart = (props) => {\r\n  const { Card, Accordion, Button } = ReactBootstrap;\r\n  let data = props.location.data ? props.location.data : products;\r\n  console.log(`data:${JSON.stringify(data)}`);\r\n\r\n  return <Accordion defaultActiveKey=\"0\">{list}</Accordion>;\r\n};\r\n\r\nconst useDataApi = (initialUrl, initialData) => {\r\n  const { useState, useEffect, useReducer } = React;\r\n  const [url, setUrl] = useState(initialUrl);\r\n\r\n  const [state, dispatch] = useReducer(dataFetchReducer, {\r\n    isLoading: false,\r\n    isError: false,\r\n    data: initialData,\r\n  });\r\n  console.log(`useDataApi called`);\r\n  useEffect(() => {\r\n    console.log(\"useEffect Called\");\r\n    let didCancel = false;\r\n    const fetchData = async () => {\r\n      dispatch({ type: \"FETCH_INIT\" });\r\n      try {\r\n        const result = await axios(url);\r\n        console.log(\"FETCH FROM URl\");\r\n        if (!didCancel) {\r\n          dispatch({ type: \"FETCH_SUCCESS\", payload: result.data });\r\n        }\r\n      } catch (error) {\r\n        if (!didCancel) {\r\n          dispatch({ type: \"FETCH_FAILURE\" });\r\n        }\r\n      }\r\n    };\r\n    fetchData();\r\n    return () => {\r\n      didCancel = true;\r\n    };\r\n  }, [url]);\r\n  return [state, setUrl];\r\n};\r\nconst dataFetchReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"FETCH_INIT\":\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        isError: false,\r\n      };\r\n    case \"FETCH_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: false,\r\n        data: action.payload,\r\n      };\r\n    case \"FETCH_FAILURE\":\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n    default:\r\n      throw new Error();\r\n  }\r\n};\r\n\r\nexport default App;\r\n\r\n// const Products = (props) => {\r\n//   const [items, setItems] = React.useState(products);\r\n//   const [cart, setCart] = React.useState([]);\r\n//   const [total, setTotal] = React.useState(0);\r\n//   const {\r\n//     Card,\r\n//     Accordion,\r\n//     Button,\r\n//     Container,\r\n//     Row,\r\n//     Col,\r\n//     Image,\r\n//     Input,\r\n//   } = ReactBootstrap;\r\n//   //  Fetch Data\r\n//   const { Fragment, useState, useEffect, useReducer } = React;\r\n//   const [query, setQuery] = useState(\"http://localhost:1337/products\");\r\n//   const [{ data, isLoading, isError }, doFetch] = useDataApi(\r\n//     \"http://localhost:1337/products\",\r\n//     {\r\n//       data: [],\r\n//     }\r\n//   );\r\n//   console.log(`Rendering Products ${JSON.stringify(data)}`);\r\n//   // Fetch Data\r\n//   const addToCart = (e) => {\r\n//     let name = e.target.name;\r\n//     let item = items.filter((item) => item.name == name);\r\n//     console.log(`add to Cart ${JSON.stringify(item)}`);\r\n//     setCart([...cart, ...item]);\r\n//     //doFetch(query);\r\n//   };\r\n//   const deleteCartItem = (index) => {\r\n//     let newCart = cart.filter((item, i) => index != i);\r\n//     setCart(newCart);\r\n//   };\r\n//   const photos = [\"apple.png\", \"orange.png\", \"beans.png\", \"cabbage.png\"];\r\n\r\n//   let list = items.map((item, index) => {\r\n//     //let n = index + 1049;\r\n//     //let url = \"https://picsum.photos/id/\" + n + \"/50/50\";\r\n\r\n//     return (\r\n//       <li key={index}>\r\n//         <Image src={photos[index % 4]} width={70} roundedCircle></Image>\r\n//         <Button variant=\"primary\" size=\"large\">\r\n//           {item.name}:{item.cost}\r\n//         </Button>\r\n//         <input name={item.name} type=\"submit\" onClick={addToCart}></input>\r\n//       </li>\r\n//     );\r\n//   });\r\n//   let cartList = cart.map((item, index) => {\r\n//     return (\r\n//       <Card key={index}>\r\n//         <Card.Header>\r\n//           <Accordion.Toggle as={Button} variant=\"link\" eventKey={1 + index}>\r\n//             {item.name}\r\n//           </Accordion.Toggle>\r\n//         </Card.Header>\r\n//         <Accordion.Collapse\r\n//           onClick={() => deleteCartItem(index)}\r\n//           eventKey={1 + index}\r\n//         >\r\n//           <Card.Body>\r\n//             $ {item.cost} from {item.country}\r\n//           </Card.Body>\r\n//         </Accordion.Collapse>\r\n//       </Card>\r\n//     );\r\n//   });\r\n\r\n//   let finalList = () => {\r\n//     let total = checkOut();\r\n//     let final = cart.map((item, index) => {\r\n//       return (\r\n//         <div key={index} index={index}>\r\n//           {item.name}\r\n//         </div>\r\n//       );\r\n//     });\r\n//     return { final, total };\r\n//   };\r\n\r\n//   const checkOut = () => {\r\n//     let costs = cart.map((item) => item.cost);\r\n//     const reducer = (accum, current) => accum + current;\r\n//     let newTotal = costs.reduce(reducer, 0);\r\n//     console.log(`total updated to ${newTotal}`);\r\n//     return newTotal;\r\n//   };\r\n//   // TODO: implement the restockProducts function\r\n//   const restockProducts = (url) => {};\r\n\r\n//   return (\r\n//     <Container>\r\n//       <Row>\r\n//         <Col>\r\n//           <h1>Product List</h1>\r\n//           <ul style={{ listStyleType: \"none\" }}>{list}</ul>\r\n//         </Col>\r\n//         <Col>\r\n//           <h1>Cart Contents</h1>\r\n//           <Accordion>{cartList}</Accordion>\r\n//         </Col>\r\n//         <Col>\r\n//           <h1>CheckOut </h1>\r\n//           <Button onClick={checkOut}>CheckOut $ {finalList().total}</Button>\r\n//           <div> {finalList().total > 0 && finalList().final} </div>\r\n//         </Col>\r\n//       </Row>\r\n//       <Row>\r\n//         <form\r\n//           onSubmit={(event) => {\r\n//             restockProducts(`http://localhost:1337/${query}`);\r\n//             console.log(`Restock called on ${query}`);\r\n//             event.preventDefault();\r\n//           }}\r\n//         >\r\n//           <input\r\n//             type=\"text\"\r\n//             value={query}\r\n//             onChange={(event) => setQuery(event.target.value)}\r\n//           />\r\n//           <button type=\"submit\">ReStock Products</button>\r\n//         </form>\r\n//       </Row>\r\n//     </Container>\r\n//   );\r\n// };\r\n// ========================================\r\n// ReactDOM.render(<Products />, document.getElementById(\"root\"));\r\n"]},"metadata":{},"sourceType":"module"}