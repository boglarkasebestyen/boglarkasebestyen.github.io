[{"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/week19/shopping_cart_react/src/index.js":"1","/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/week19/shopping_cart_react/src/reportWebVitals.js":"2","/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/week19/shopping_cart_react/src/Products.js":"3","/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/to_github_backup/boglarkasebestyen.github.io/2nd_semester_assignments/shopping_cart_react/src/index.js":"4","/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/to_github_backup/boglarkasebestyen.github.io/2nd_semester_assignments/shopping_cart_react/src/reportWebVitals.js":"5","/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/to_github_backup/boglarkasebestyen.github.io/2nd_semester_assignments/shopping_cart_react/src/Products.js":"6"},{"size":443,"mtime":1636584526654,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1633036082767,"results":"9","hashOfConfig":"8"},{"size":9156,"mtime":1636664277275,"results":"10","hashOfConfig":"8"},{"size":443,"mtime":1636584526654,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1633036082767,"results":"13","hashOfConfig":"12"},{"size":8700,"mtime":1636665579133,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11kk2ek",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"11dwuro",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/week19/shopping_cart_react/src/index.js",[],"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/week19/shopping_cart_react/src/reportWebVitals.js",[],["30","31"],"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/2nd semester/week19/shopping_cart_react/src/Products.js",["32","33","34","35","36","37","38","39","40"],"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/to_github_backup/boglarkasebestyen.github.io/2nd_semester_assignments/shopping_cart_react/src/index.js",[],["41","42"],"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/to_github_backup/boglarkasebestyen.github.io/2nd_semester_assignments/shopping_cart_react/src/reportWebVitals.js",[],"/Users/sebestyenboglarka/Desktop/_uWu/MIT_MERN_2021-'22/to_github_backup/boglarkasebestyen.github.io/2nd_semester_assignments/shopping_cart_react/src/Products.js",["43","44","45","46","47","48","49","50"],"/*\r\n- pics must come randomly from picsum\r\n- keep track of how many products are in stock\r\n- how much do the products cost - total in Checkout\r\n- if product stock is zero, don't add it to cart\r\n\r\n- delete the product by clicking it in the cart: \r\n    - decrement them from the product\r\n    - adjust stock / put it back in stock\r\n    - delete item from Checkout\r\n    - adjust the total price at in Checkout\r\n\r\n- restock: Submit button adds them to the cart and the checkout\r\n\r\n-------------------\r\nChanges made to starter code:\r\n/*\r\n\r\n - eventKey -> eventkey corrected\r\n - axios -> Axios correct\r\n - Accordion.Toggle -> deprecated, changed to Accordion\r\n\r\n<Card key={index}>\r\n  <Card.Header>\r\n    <Accordion as={Button} variant=\"link\" eventkey={1 + index}>\r\n\r\n          --> deleted \"as={Button}\"\"\r\n\r\n<Card.Body as={Button}> --> added button\r\n   $ {item.cost} from {item.country} -> deleted \r\n    {\"Click to delete\"} --> added instead\r\n\r\n\r\n<Accordion variant=\"link\" eventkey={1 + index}>\r\n  {item.name + \":\"} $ {item.cost} from {item.country} --> added instead of just item name\r\n\r\n\r\n <Card.Header>\r\n    {item.name}:{\" \" + \"$\" + item.cost}:{\" \" + \"In stock:\" + item.instock}\r\n  </Card.Header>          --> was Button before\r\n\r\n \r\n<h1>Check Out </h1>\r\n  <Card.Header onClick={checkOut}>Total: ${finalList().total}</Card.Header>\r\n\r\n                          --> was Button before, + wrote Check Out\r\n\r\n\r\n*/\r\n\r\nimport React, {useState, useEffect, useReducer} from 'react';\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Accordion from  \"react-bootstrap/Accordion\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Image from \"react-bootstrap/Image\";\r\n// import Input from \"react-bootstrap/Input\"; //doesn't exist\r\n// import InputGroup from \"react-bootstrap/InputGroup\"; //exists, but not needed\r\n\r\n// import ReactBootstrap from \"react-bootstrap\";\r\nimport Axios from \"axios\";\r\n\r\n// simulate getting products from database\r\nconst products = [\r\n  { name: \"Apples\", country: \"Italy\", cost: 3, instock: 10 },\r\n  { name: \"Oranges\", country: \"Spain\", cost: 4, instock: 3 },\r\n  { name: \"Beans\", country: \"USA\", cost: 2, instock: 5 },\r\n  { name: \"Cabbage\", country: \"USA\", cost: 1, instock: 8 },\r\n];\r\n\r\n\r\n//=========Cart=============//\r\nconst Cart = (props) => {\r\n  // const { Card, Accordion, Button } = ReactBootstrap;\r\n  let data = props.location.data ? props.location.data : products;\r\n  console.log(`data:${JSON.stringify(data)}`);\r\n\r\n  return <Accordion defaultActiveKey=\"0\">{props.list}</Accordion>;\r\n};\r\n\r\nconst useDataApi = (initialUrl, initialData) => {\r\n  // const { useState, useEffect, useReducer } = React;\r\n  const [url, setUrl] = useState(initialUrl);\r\n\r\n  const [state, dispatch] = useReducer(dataFetchReducer, {\r\n    isLoading: false,\r\n    isError: false,\r\n    data: initialData,\r\n  });\r\n\r\n  console.log(`useDataApi called`);\r\n\r\n\r\n  useEffect(() => {\r\n    console.log(\"useEffect Called\");\r\n    let didCancel = false;\r\n    const fetchData = async () => {\r\n      dispatch({ type: \"FETCH_INIT\" });\r\n      try {\r\n        const result = await Axios(url);\r\n        console.log(\"FETCH FROM URl\");\r\n        if (!didCancel) {\r\n          dispatch({ type: \"FETCH_SUCCESS\", payload: result.data });\r\n        }\r\n      } catch (error) {\r\n        if (!didCancel) {\r\n          dispatch({ type: \"FETCH_FAILURE\" });\r\n        }\r\n      }\r\n    };\r\n    fetchData();\r\n    return () => {\r\n      didCancel = true;\r\n    };\r\n  }, [url]);\r\n  return [state, setUrl];\r\n};\r\n\r\n\r\nconst dataFetchReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"FETCH_INIT\":\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        isError: false,\r\n      };\r\n    case \"FETCH_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: false,\r\n        data: action.payload,\r\n      };\r\n    case \"FETCH_FAILURE\":\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n    default:\r\n      throw new Error();\r\n  }\r\n};\r\n\r\nconst Products = (props) => {\r\n  const [items, setItems] = useState(products);\r\n  const [cart, setCart] = useState([]);\r\n  // const [total, setTotal] = useState(0);\r\n  // const {\r\n  //   Card,\r\n  //   Accordion,\r\n  //   Button,\r\n  //   Container,\r\n  //   Row,\r\n  //   Col,\r\n  //   Image,\r\n  //   Input,\r\n  // } = ReactBootstrap;\r\n  //  Fetch Data\r\n  // const { Fragment, useState, useEffect, useReducer } = React;\r\n  const [query, setQuery] = useState(\"http://localhost:1337/products\");\r\n  const [{ data, isLoading, isError }, doFetch] = useDataApi(\r\n    \"http://localhost:1337/products\",\r\n    {\r\n      data: [],\r\n    }\r\n  );\r\n  console.log(`Rendering Products ${JSON.stringify(data)}`);\r\n\r\n  // Fetch Data\r\n  const addToCart = (e) => {\r\n    let name = e.target.name;\r\n    let item = items.filter((item) => item.name === name); //filter returns an array\r\n\r\n    //subtracting 1 when adding item to cart\r\n    if (item[0].instock == 0) {\r\n      return;\r\n    } else {\r\n      item[0].instock = item[0].instock - 1;\r\n    };\r\n\r\n    console.log(`add to Cart ${JSON.stringify(item)}`);\r\n    setCart([...cart, ...item]);\r\n    //doFetch(query);\r\n  };\r\n\r\n  const deleteCartItem = (delIndex) => {\r\n    //the index in the cart, not in the product list\r\n    let newCart = cart.filter((item, i) => delIndex !== i);\r\n    \r\n    //checking which item was deleted\r\n    let target = cart.filter((item, index) => delIndex == index);\r\n    let newItems = items.map((item, index) => {\r\n      if (item.name == target[0].name) {\r\n        item.instock = item.instock + 1;\r\n      }\r\n      return item;\r\n    })\r\n    setCart(newCart);\r\n    setItems(newItems);\r\n  };\r\n\r\n  \r\n  // const photos = [\"apple.png\", \"orange.png\", \"beans.png\", \"cabbage.png\"];\r\n\r\n  let list = items.map((item, index) => {\r\n    let n = index + 1049;\r\n    let uhit = \"https://picsum.photos/\" + n;\r\n    return (\r\n      <li key={index}>\r\n        <Image src={uhit} width={70} roundedCircle></Image>\r\n        <Card.Header>\r\n          {item.name}:{\" \" + \"$\" + item.cost}:{\" \" + \"In stock:\"} {item.instock}\r\n        </Card.Header>\r\n        <input name={item.name} type=\"submit\" onClick={addToCart}></input>\r\n      </li>\r\n    );\r\n  });\r\n\r\n\r\n  let cartList = cart.map((item, index) => {\r\n    return (\r\n      <Card key={index}>\r\n        <Card.Header>\r\n          <Accordion variant=\"link\" eventkey={1 + index}>\r\n            {item.name + \":\"} ${item.cost} from {item.country}\r\n          </Accordion>\r\n        </Card.Header>\r\n        <Accordion.Collapse\r\n          onClick={() => deleteCartItem(index)}\r\n          eventkey={1 + index}\r\n        >\r\n          <Card.Body as={Button}>\r\n            {\"Click to remove item\"}\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    );\r\n  });\r\n\r\n  let finalList = () => {\r\n    let total = checkOut();\r\n    let final = cart.map((item, index) => {\r\n      return (\r\n        <div key={index} index={index}>\r\n          {item.name}\r\n        </div>\r\n      );\r\n    });\r\n    return { final, total };\r\n  };\r\n\r\n  const checkOut = () => {\r\n    let costs = cart.map((item) => item.cost);\r\n    const reducer = (accum, current) => accum + current;\r\n    let newTotal = costs.reduce(reducer, 0);\r\n    console.log(`total updated to ${newTotal}`);\r\n    return newTotal;\r\n  };\r\n\r\n\r\n  const restockProducts = (url) => {\r\n    doFetch(url);\r\n    let newItems = data.map((item) => {\r\n      let { name, country, cost, instock } = item;\r\n      return { name, country, cost, instock };\r\n    });\r\n    // setItems([...items, ...newItems]);\r\n    setItems([...newItems]);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <h1>Product List</h1>\r\n          <ul style={{ listStyleType: \"none\" }}>{list}</ul>\r\n        </Col>\r\n        <Col>\r\n          <h1>Cart Contents</h1>\r\n          <Accordion>{cartList}</Accordion>\r\n        </Col>\r\n        <Col>\r\n          <h1>Check Out </h1>\r\n          <Card.Header onClick={checkOut}>Total: ${finalList().total}</Card.Header>\r\n          <div> {finalList().total > 0 && finalList().final} </div>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <form\r\n          onSubmit={(event) => {\r\n            restockProducts(`http://localhost:1337/${query}`);\r\n            console.log(`Restock called on ${query}`);\r\n            event.preventDefault();\r\n          }}\r\n        >\r\n          <input \r\n            type=\"text\"\r\n            value={query}\r\n            onChange={(event) => setQuery(event.target.value)}\r\n          />\r\n          <button type=\"submit\">Restock Products</button>\r\n        </form>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Products;\r\n\r\n",{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":95,"column":7,"nodeType":"57","messageId":"58","endLine":95,"endColumn":11},{"ruleId":"55","severity":1,"message":"59","line":185,"column":18,"nodeType":"57","messageId":"58","endLine":185,"endColumn":27},{"ruleId":"55","severity":1,"message":"60","line":185,"column":29,"nodeType":"57","messageId":"58","endLine":185,"endColumn":36},{"ruleId":"61","severity":1,"message":"62","line":199,"column":25,"nodeType":"63","messageId":"64","endLine":199,"endColumn":27},{"ruleId":"61","severity":1,"message":"62","line":215,"column":56,"nodeType":"63","messageId":"64","endLine":215,"endColumn":58},{"ruleId":"61","severity":1,"message":"62","line":218,"column":21,"nodeType":"63","messageId":"64","endLine":218,"endColumn":23},{"ruleId":"65","severity":1,"message":"66","line":218,"column":42,"nodeType":"63","messageId":"67","endLine":218,"endColumn":69},{"ruleId":"68","severity":1,"message":"69","line":237,"column":28,"nodeType":"63","messageId":"70","endLine":237,"endColumn":29},{"ruleId":"68","severity":1,"message":"69","line":237,"column":52,"nodeType":"63","messageId":"70","endLine":237,"endColumn":53},{"ruleId":"51","replacedBy":"71"},{"ruleId":"53","replacedBy":"72"},{"ruleId":"55","severity":1,"message":"56","line":75,"column":7,"nodeType":"57","messageId":"58","endLine":75,"endColumn":11},{"ruleId":"55","severity":1,"message":"59","line":165,"column":18,"nodeType":"57","messageId":"58","endLine":165,"endColumn":27},{"ruleId":"55","severity":1,"message":"60","line":165,"column":29,"nodeType":"57","messageId":"58","endLine":165,"endColumn":36},{"ruleId":"61","severity":1,"message":"62","line":179,"column":25,"nodeType":"63","messageId":"64","endLine":179,"endColumn":27},{"ruleId":"61","severity":1,"message":"62","line":195,"column":56,"nodeType":"63","messageId":"64","endLine":195,"endColumn":58},{"ruleId":"61","severity":1,"message":"62","line":197,"column":21,"nodeType":"63","messageId":"64","endLine":197,"endColumn":23},{"ruleId":"68","severity":1,"message":"69","line":216,"column":28,"nodeType":"63","messageId":"70","endLine":216,"endColumn":29},{"ruleId":"68","severity":1,"message":"69","line":216,"column":52,"nodeType":"63","messageId":"70","endLine":216,"endColumn":53},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-unused-vars","'Cart' is assigned a value but never used.","Identifier","unusedVar","'isLoading' is assigned a value but never used.","'isError' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-self-compare","Comparing to itself is potentially pointless.","comparingToSelf","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat",["73"],["74"],"no-global-assign","no-unsafe-negation"]